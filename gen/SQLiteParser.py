# Generated from SQLite.g4 by ANTLR 4.5.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u009f\u06c5\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\3\2\3\2\7\2\u00a9\n\2\f\2\16\2\u00ac\13\2\3")
        buf.write(u"\2\3\2\3\3\3\3\3\4\7\4\u00b3\n\4\f\4\16\4\u00b6\13\4")
        buf.write(u"\3\4\3\4\6\4\u00ba\n\4\r\4\16\4\u00bb\3\4\7\4\u00bf\n")
        buf.write(u"\4\f\4\16\4\u00c2\13\4\3\4\7\4\u00c5\n\4\f\4\16\4\u00c8")
        buf.write(u"\13\4\3\5\3\5\3\5\5\5\u00cd\n\5\5\5\u00cf\n\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write(u"\3\5\3\5\5\5\u00ef\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u00f6")
        buf.write(u"\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00fe\n\6\3\6\5\6\u0101")
        buf.write(u"\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u010a\n\7\3\b\3")
        buf.write(u"\b\5\b\u010e\n\b\3\b\3\b\3\b\3\b\3\t\3\t\5\t\u0116\n")
        buf.write(u"\t\3\t\3\t\5\t\u011a\n\t\5\t\u011c\n\t\3\n\3\n\3\n\5")
        buf.write(u"\n\u0121\n\n\5\n\u0123\n\n\3\13\3\13\5\13\u0127\n\13")
        buf.write(u"\3\13\3\13\3\13\7\13\u012c\n\13\f\13\16\13\u012f\13\13")
        buf.write(u"\5\13\u0131\n\13\3\13\3\13\3\13\5\13\u0136\n\13\3\13")
        buf.write(u"\3\13\5\13\u013a\n\13\3\13\6\13\u013d\n\13\r\13\16\13")
        buf.write(u"\u013e\3\13\3\13\3\13\3\13\3\13\7\13\u0146\n\13\f\13")
        buf.write(u"\16\13\u0149\13\13\5\13\u014b\n\13\3\13\3\13\3\13\3\13")
        buf.write(u"\5\13\u0151\n\13\5\13\u0153\n\13\3\f\3\f\5\f\u0157\n")
        buf.write(u"\f\3\f\3\f\3\f\3\f\5\f\u015d\n\f\3\f\3\f\3\f\5\f\u0162")
        buf.write(u"\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u016b\n\f\f\f\16")
        buf.write(u"\f\u016e\13\f\3\f\3\f\3\f\5\f\u0173\n\f\3\r\3\r\5\r\u0177")
        buf.write(u"\n\r\3\r\3\r\3\r\3\r\5\r\u017d\n\r\3\r\3\r\3\r\5\r\u0182")
        buf.write(u"\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u0189\n\r\f\r\16\r\u018c")
        buf.write(u"\13\r\3\r\3\r\7\r\u0190\n\r\f\r\16\r\u0193\13\r\3\r\3")
        buf.write(u"\r\3\r\5\r\u0198\n\r\3\r\3\r\5\r\u019c\n\r\3\16\3\16")
        buf.write(u"\5\16\u01a0\n\16\3\16\3\16\3\16\3\16\5\16\u01a6\n\16")
        buf.write(u"\3\16\3\16\3\16\5\16\u01ab\n\16\3\16\3\16\3\16\3\16\3")
        buf.write(u"\16\5\16\u01b2\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\7\16\u01bb\n\16\f\16\16\16\u01be\13\16\5\16\u01c0\n")
        buf.write(u"\16\5\16\u01c2\n\16\3\16\3\16\3\16\3\16\5\16\u01c8\n")
        buf.write(u"\16\3\16\3\16\3\16\3\16\5\16\u01ce\n\16\3\16\3\16\5\16")
        buf.write(u"\u01d2\n\16\3\16\3\16\3\16\3\16\3\16\5\16\u01d9\n\16")
        buf.write(u"\3\16\3\16\6\16\u01dd\n\16\r\16\16\16\u01de\3\16\3\16")
        buf.write(u"\3\17\3\17\5\17\u01e5\n\17\3\17\3\17\3\17\3\17\5\17\u01eb")
        buf.write(u"\n\17\3\17\3\17\3\17\5\17\u01f0\n\17\3\17\3\17\3\17\3")
        buf.write(u"\17\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u01fc\n\20\3\20")
        buf.write(u"\3\20\3\20\5\20\u0201\n\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write(u"\20\3\20\7\20\u020a\n\20\f\20\16\20\u020d\13\20\3\20")
        buf.write(u"\3\20\5\20\u0211\n\20\3\21\5\21\u0214\n\21\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\5\21\u021b\n\21\3\22\5\22\u021e\n\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\5\22\u0225\n\22\3\22\3\22\3")
        buf.write(u"\22\3\22\3\22\7\22\u022c\n\22\f\22\16\22\u022f\13\22")
        buf.write(u"\5\22\u0231\n\22\3\22\3\22\3\22\3\22\5\22\u0237\n\22")
        buf.write(u"\5\22\u0239\n\22\3\23\3\23\5\23\u023d\n\23\3\23\3\23")
        buf.write(u"\3\24\3\24\3\24\3\24\5\24\u0245\n\24\3\24\3\24\3\24\5")
        buf.write(u"\24\u024a\n\24\3\24\3\24\3\25\3\25\3\25\3\25\5\25\u0252")
        buf.write(u"\n\25\3\25\3\25\3\25\5\25\u0257\n\25\3\25\3\25\3\26\3")
        buf.write(u"\26\3\26\3\26\5\26\u025f\n\26\3\26\3\26\3\26\5\26\u0264")
        buf.write(u"\n\26\3\26\3\26\3\27\3\27\3\27\3\27\5\27\u026c\n\27\3")
        buf.write(u"\27\3\27\3\27\5\27\u0271\n\27\3\27\3\27\3\30\3\30\5\30")
        buf.write(u"\u0277\n\30\3\30\3\30\3\30\7\30\u027c\n\30\f\30\16\30")
        buf.write(u"\u027f\13\30\5\30\u0281\n\30\3\30\3\30\3\30\3\30\7\30")
        buf.write(u"\u0287\n\30\f\30\16\30\u028a\13\30\3\30\3\30\3\30\3\30")
        buf.write(u"\3\30\7\30\u0291\n\30\f\30\16\30\u0294\13\30\5\30\u0296")
        buf.write(u"\n\30\3\30\3\30\3\30\3\30\5\30\u029c\n\30\5\30\u029e")
        buf.write(u"\n\30\3\31\5\31\u02a1\n\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write(u"\3\31\5\31\u02b4\n\31\3\31\3\31\3\31\3\31\5\31\u02ba")
        buf.write(u"\n\31\3\31\3\31\3\31\3\31\3\31\7\31\u02c1\n\31\f\31\16")
        buf.write(u"\31\u02c4\13\31\3\31\3\31\5\31\u02c8\n\31\3\31\3\31\3")
        buf.write(u"\31\3\31\3\31\7\31\u02cf\n\31\f\31\16\31\u02d2\13\31")
        buf.write(u"\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u02da\n\31\f\31\16")
        buf.write(u"\31\u02dd\13\31\3\31\3\31\7\31\u02e1\n\31\f\31\16\31")
        buf.write(u"\u02e4\13\31\3\31\3\31\3\31\5\31\u02e9\n\31\3\32\3\32")
        buf.write(u"\3\32\3\32\5\32\u02ef\n\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\5\32\u02f8\n\32\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write(u"\u02ff\n\33\3\33\3\33\5\33\u0303\n\33\5\33\u0305\n\33")
        buf.write(u"\3\34\3\34\5\34\u0309\n\34\3\34\3\34\3\35\3\35\3\35\5")
        buf.write(u"\35\u0310\n\35\5\35\u0312\n\35\3\35\3\35\5\35\u0316\n")
        buf.write(u"\35\3\35\5\35\u0319\n\35\3\36\3\36\3\36\3\37\3\37\5\37")
        buf.write(u"\u0320\n\37\3\37\3\37\3\37\7\37\u0325\n\37\f\37\16\37")
        buf.write(u"\u0328\13\37\5\37\u032a\n\37\3\37\3\37\3\37\3\37\3\37")
        buf.write(u"\3\37\7\37\u0332\n\37\f\37\16\37\u0335\13\37\5\37\u0337")
        buf.write(u"\n\37\3\37\3\37\3\37\3\37\5\37\u033d\n\37\5\37\u033f")
        buf.write(u"\n\37\3 \3 \5 \u0343\n \3 \3 \3 \7 \u0348\n \f \16 \u034b")
        buf.write(u"\13 \5 \u034d\n \3 \3 \3 \3 \7 \u0353\n \f \16 \u0356")
        buf.write(u"\13 \3 \3 \3 \3 \3 \7 \u035d\n \f \16 \u0360\13 \5 \u0362")
        buf.write(u"\n \3 \3 \3 \3 \5 \u0368\n \5 \u036a\n \3!\3!\5!\u036e")
        buf.write(u"\n!\3!\3!\3!\7!\u0373\n!\f!\16!\u0376\13!\3!\3!\3!\3")
        buf.write(u"!\7!\u037c\n!\f!\16!\u037f\13!\3!\5!\u0382\n!\5!\u0384")
        buf.write(u"\n!\3!\3!\5!\u0388\n!\3!\3!\3!\3!\3!\7!\u038f\n!\f!\16")
        buf.write(u"!\u0392\13!\3!\3!\5!\u0396\n!\5!\u0398\n!\3!\3!\3!\3")
        buf.write(u"!\3!\7!\u039f\n!\f!\16!\u03a2\13!\3!\3!\3!\3!\3!\3!\7")
        buf.write(u"!\u03aa\n!\f!\16!\u03ad\13!\3!\3!\7!\u03b1\n!\f!\16!")
        buf.write(u"\u03b4\13!\5!\u03b6\n!\3\"\5\"\u03b9\n\"\3\"\3\"\3\"")
        buf.write(u"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03c6\n\"\3\"\3")
        buf.write(u"\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u03d2\n\"\f\"")
        buf.write(u"\16\"\u03d5\13\"\3\"\3\"\5\"\u03d9\n\"\3#\5#\u03dc\n")
        buf.write(u"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03e9\n#\3#\3#")
        buf.write(u"\3#\3#\3#\3#\3#\3#\3#\3#\7#\u03f5\n#\f#\16#\u03f8\13")
        buf.write(u"#\3#\3#\5#\u03fc\n#\3#\3#\3#\3#\3#\7#\u0403\n#\f#\16")
        buf.write(u"#\u0406\13#\5#\u0408\n#\3#\3#\3#\3#\5#\u040e\n#\5#\u0410")
        buf.write(u"\n#\3$\3$\3%\3%\5%\u0416\n%\3%\7%\u0419\n%\f%\16%\u041c")
        buf.write(u"\13%\3&\6&\u041f\n&\r&\16&\u0420\3&\3&\3&\3&\3&\3&\3")
        buf.write(u"&\3&\3&\3&\5&\u042d\n&\3\'\3\'\5\'\u0431\n\'\3\'\3\'")
        buf.write(u"\3\'\5\'\u0436\n\'\3\'\3\'\5\'\u043a\n\'\3\'\5\'\u043d")
        buf.write(u"\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write(u"\3\'\3\'\3\'\3\'\5\'\u044f\n\'\3\'\3\'\3\'\5\'\u0454")
        buf.write(u"\n\'\3(\3(\3(\5(\u0459\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)")
        buf.write(u"\5)\u0464\n)\3)\3)\3)\5)\u0469\n)\3)\3)\3)\3)\5)\u046f")
        buf.write(u"\n)\3)\3)\3)\7)\u0474\n)\f)\16)\u0477\13)\3)\5)\u047a")
        buf.write(u"\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u048a")
        buf.write(u"\n)\3)\5)\u048d\n)\3)\3)\3)\3)\3)\3)\5)\u0495\n)\3)\3")
        buf.write(u")\3)\3)\3)\6)\u049c\n)\r)\16)\u049d\3)\3)\5)\u04a2\n")
        buf.write(u")\3)\3)\3)\5)\u04a7\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)")
        buf.write(u"\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(u")\5)\u04c5\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u04d1")
        buf.write(u"\n)\3)\3)\3)\5)\u04d6\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(u")\5)\u04e2\n)\3)\3)\3)\3)\5)\u04e8\n)\3)\3)\3)\3)\3)")
        buf.write(u"\5)\u04ef\n)\3)\3)\5)\u04f3\n)\3)\3)\3)\3)\3)\3)\7)\u04fb")
        buf.write(u"\n)\f)\16)\u04fe\13)\5)\u0500\n)\3)\3)\3)\3)\5)\u0506")
        buf.write(u"\n)\3)\5)\u0509\n)\7)\u050b\n)\f)\16)\u050e\13)\3*\3")
        buf.write(u"*\3*\3*\3*\3*\7*\u0516\n*\f*\16*\u0519\13*\3*\3*\5*\u051d")
        buf.write(u"\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0529\n*\3*\3*\5")
        buf.write(u"*\u052d\n*\7*\u052f\n*\f*\16*\u0532\13*\3*\5*\u0535\n")
        buf.write(u"*\3*\3*\3*\3*\3*\5*\u053c\n*\5*\u053e\n*\3+\3+\3+\3+")
        buf.write(u"\3+\3+\5+\u0546\n+\3+\3+\3,\3,\3,\5,\u054d\n,\3,\5,\u0550")
        buf.write(u"\n,\3-\3-\5-\u0554\n-\3-\3-\3-\5-\u0559\n-\3-\3-\3-\3")
        buf.write(u"-\7-\u055f\n-\f-\16-\u0562\13-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write(u"-\3-\3-\3-\3-\3-\3-\7-\u0572\n-\f-\16-\u0575\13-\3-\3")
        buf.write(u"-\3-\5-\u057a\n-\3.\3.\5.\u057e\n.\3.\3.\3.\3.\3.\3.")
        buf.write(u"\3.\3.\3.\3.\3.\3.\7.\u058c\n.\f.\16.\u058f\13.\3/\3")
        buf.write(u"/\3/\5/\u0594\n/\3/\3/\3/\3/\3/\3/\5/\u059c\n/\3\60\3")
        buf.write(u"\60\3\60\5\60\u05a1\n\60\3\60\5\60\u05a4\n\60\3\61\3")
        buf.write(u"\61\3\61\5\61\u05a9\n\61\3\62\3\62\3\62\3\62\3\62\7\62")
        buf.write(u"\u05b0\n\62\f\62\16\62\u05b3\13\62\3\62\3\62\5\62\u05b7")
        buf.write(u"\n\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3")
        buf.write(u"\63\3\63\3\63\5\63\u05c5\n\63\3\63\5\63\u05c8\n\63\5")
        buf.write(u"\63\u05ca\n\63\3\64\3\64\3\64\5\64\u05cf\n\64\3\64\3")
        buf.write(u"\64\5\64\u05d3\n\64\3\64\5\64\u05d6\n\64\3\64\3\64\3")
        buf.write(u"\64\3\64\3\64\5\64\u05dd\n\64\3\64\3\64\3\64\3\64\7\64")
        buf.write(u"\u05e3\n\64\f\64\16\64\u05e6\13\64\3\64\5\64\u05e9\n")
        buf.write(u"\64\3\64\3\64\5\64\u05ed\n\64\3\64\5\64\u05f0\n\64\3")
        buf.write(u"\64\3\64\3\64\3\64\5\64\u05f6\n\64\3\64\5\64\u05f9\n")
        buf.write(u"\64\5\64\u05fb\n\64\3\65\3\65\3\65\3\65\3\65\7\65\u0602")
        buf.write(u"\n\65\f\65\16\65\u0605\13\65\3\66\3\66\5\66\u0609\n\66")
        buf.write(u"\3\66\3\66\5\66\u060d\n\66\3\66\3\66\5\66\u0611\n\66")
        buf.write(u"\3\66\5\66\u0614\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write(u"\67\7\67\u061d\n\67\f\67\16\67\u0620\13\67\3\67\3\67")
        buf.write(u"\5\67\u0624\n\67\38\38\58\u0628\n8\38\38\38\78\u062d")
        buf.write(u"\n8\f8\168\u0630\138\38\38\38\38\78\u0636\n8\f8\168\u0639")
        buf.write(u"\138\38\58\u063c\n8\58\u063e\n8\38\38\58\u0642\n8\38")
        buf.write(u"\38\38\38\38\78\u0649\n8\f8\168\u064c\138\38\38\58\u0650")
        buf.write(u"\n8\58\u0652\n8\38\38\38\38\38\78\u0659\n8\f8\168\u065c")
        buf.write(u"\138\38\38\38\38\38\38\78\u0664\n8\f8\168\u0667\138\3")
        buf.write(u"8\38\78\u066b\n8\f8\168\u066e\138\58\u0670\n8\39\39\3")
        buf.write(u"9\39\39\59\u0677\n9\3:\3:\3:\3:\3:\7:\u067e\n:\f:\16")
        buf.write(u":\u0681\13:\3:\3:\5:\u0685\n:\3;\5;\u0688\n;\3;\3;\3")
        buf.write(u"<\3<\3=\3=\3>\3>\3?\3?\5?\u0694\n?\3@\3@\3A\3A\3B\3B")
        buf.write(u"\3C\3C\3D\3D\3E\3E\3F\3F\3G\3G\3H\3H\3I\3I\3J\3J\3K\3")
        buf.write(u"K\3L\3L\3M\3M\3N\3N\3O\3O\3P\3P\3Q\3Q\3R\3R\3S\3S\3S")
        buf.write(u"\3S\3S\3S\3S\5S\u06c3\nS\3S\2\3PT\2\4\6\b\n\f\16\20\22")
        buf.write(u"\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNP")
        buf.write(u"RTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write(u"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write(u"\u009c\u009e\u00a0\u00a2\u00a4\2\24\5\2<<GGTT\4\2\61")
        buf.write(u"\61DD\4\2\7\7ll\3\2\u0085\u0086\4\2\37\37@@\4\2$$>>\7")
        buf.write(u"\2\33\33JJSS||\177\177\4\2\t\t\16\17\3\2\n\13\3\2\20")
        buf.write(u"\23\3\2\24\27\6\2OOcceexx\4\2==\u008d\u008d\5\2\33\33")
        buf.write(u"JJ\177\177\6\2\668jj\u0098\u0098\u009a\u009b\4\2\n\f")
        buf.write(u"hh\4\2\u0097\u0097\u009a\u009a\3\2\33\u0096\u07d2\2\u00aa")
        buf.write(u"\3\2\2\2\4\u00af\3\2\2\2\6\u00b4\3\2\2\2\b\u00ce\3\2")
        buf.write(u"\2\2\n\u00f0\3\2\2\2\f\u0102\3\2\2\2\16\u010b\3\2\2\2")
        buf.write(u"\20\u0113\3\2\2\2\22\u011d\3\2\2\2\24\u0130\3\2\2\2\26")
        buf.write(u"\u0154\3\2\2\2\30\u0174\3\2\2\2\32\u019d\3\2\2\2\34\u01e2")
        buf.write(u"\3\2\2\2\36\u01f5\3\2\2\2 \u0213\3\2\2\2\"\u021d\3\2")
        buf.write(u"\2\2$\u023a\3\2\2\2&\u0240\3\2\2\2(\u024d\3\2\2\2*\u025a")
        buf.write(u"\3\2\2\2,\u0267\3\2\2\2.\u0280\3\2\2\2\60\u02a0\3\2\2")
        buf.write(u"\2\62\u02ea\3\2\2\2\64\u02f9\3\2\2\2\66\u0306\3\2\2\2")
        buf.write(u"8\u030c\3\2\2\2:\u031a\3\2\2\2<\u0329\3\2\2\2>\u034c")
        buf.write(u"\3\2\2\2@\u03b5\3\2\2\2B\u03b8\3\2\2\2D\u03db\3\2\2\2")
        buf.write(u"F\u0411\3\2\2\2H\u0413\3\2\2\2J\u041e\3\2\2\2L\u0430")
        buf.write(u"\3\2\2\2N\u0458\3\2\2\2P\u04a6\3\2\2\2R\u050f\3\2\2\2")
        buf.write(u"T\u053f\3\2\2\2V\u0549\3\2\2\2X\u0553\3\2\2\2Z\u057b")
        buf.write(u"\3\2\2\2\\\u0593\3\2\2\2^\u059d\3\2\2\2`\u05a8\3\2\2")
        buf.write(u"\2b\u05aa\3\2\2\2d\u05c9\3\2\2\2f\u05fa\3\2\2\2h\u05fc")
        buf.write(u"\3\2\2\2j\u0613\3\2\2\2l\u0623\3\2\2\2n\u066f\3\2\2\2")
        buf.write(u"p\u0676\3\2\2\2r\u0678\3\2\2\2t\u0687\3\2\2\2v\u068b")
        buf.write(u"\3\2\2\2x\u068d\3\2\2\2z\u068f\3\2\2\2|\u0693\3\2\2\2")
        buf.write(u"~\u0695\3\2\2\2\u0080\u0697\3\2\2\2\u0082\u0699\3\2\2")
        buf.write(u"\2\u0084\u069b\3\2\2\2\u0086\u069d\3\2\2\2\u0088\u069f")
        buf.write(u"\3\2\2\2\u008a\u06a1\3\2\2\2\u008c\u06a3\3\2\2\2\u008e")
        buf.write(u"\u06a5\3\2\2\2\u0090\u06a7\3\2\2\2\u0092\u06a9\3\2\2")
        buf.write(u"\2\u0094\u06ab\3\2\2\2\u0096\u06ad\3\2\2\2\u0098\u06af")
        buf.write(u"\3\2\2\2\u009a\u06b1\3\2\2\2\u009c\u06b3\3\2\2\2\u009e")
        buf.write(u"\u06b5\3\2\2\2\u00a0\u06b7\3\2\2\2\u00a2\u06b9\3\2\2")
        buf.write(u"\2\u00a4\u06c2\3\2\2\2\u00a6\u00a9\5\6\4\2\u00a7\u00a9")
        buf.write(u"\5\4\3\2\u00a8\u00a6\3\2\2\2\u00a8\u00a7\3\2\2\2\u00a9")
        buf.write(u"\u00ac\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2")
        buf.write(u"\2\u00ab\u00ad\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00ae")
        buf.write(u"\7\2\2\3\u00ae\3\3\2\2\2\u00af\u00b0\7\u009f\2\2\u00b0")
        buf.write(u"\5\3\2\2\2\u00b1\u00b3\7\3\2\2\u00b2\u00b1\3\2\2\2\u00b3")
        buf.write(u"\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b4\u00b5\3\2\2")
        buf.write(u"\2\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b7\u00c0")
        buf.write(u"\5\b\5\2\u00b8\u00ba\7\3\2\2\u00b9\u00b8\3\2\2\2\u00ba")
        buf.write(u"\u00bb\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2")
        buf.write(u"\2\u00bc\u00bd\3\2\2\2\u00bd\u00bf\5\b\5\2\u00be\u00b9")
        buf.write(u"\3\2\2\2\u00bf\u00c2\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0")
        buf.write(u"\u00c1\3\2\2\2\u00c1\u00c6\3\2\2\2\u00c2\u00c0\3\2\2")
        buf.write(u"\2\u00c3\u00c5\7\3\2\2\u00c4\u00c3\3\2\2\2\u00c5\u00c8")
        buf.write(u"\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7")
        buf.write(u"\7\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c9\u00cc\7I\2\2\u00ca")
        buf.write(u"\u00cb\7t\2\2\u00cb\u00cd\7q\2\2\u00cc\u00ca\3\2\2\2")
        buf.write(u"\u00cc\u00cd\3\2\2\2\u00cd\u00cf\3\2\2\2\u00ce\u00c9")
        buf.write(u"\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00ee\3\2\2\2\u00d0")
        buf.write(u"\u00ef\5\n\6\2\u00d1\u00ef\5\f\7\2\u00d2\u00ef\5\16\b")
        buf.write(u"\2\u00d3\u00ef\5\20\t\2\u00d4\u00ef\5\22\n\2\u00d5\u00ef")
        buf.write(u"\5\24\13\2\u00d6\u00ef\5\26\f\2\u00d7\u00ef\5\30\r\2")
        buf.write(u"\u00d8\u00ef\5\32\16\2\u00d9\u00ef\5\34\17\2\u00da\u00ef")
        buf.write(u"\5\36\20\2\u00db\u00ef\5 \21\2\u00dc\u00ef\5\"\22\2\u00dd")
        buf.write(u"\u00ef\5$\23\2\u00de\u00ef\5&\24\2\u00df\u00ef\5(\25")
        buf.write(u"\2\u00e0\u00ef\5*\26\2\u00e1\u00ef\5,\27\2\u00e2\u00ef")
        buf.write(u"\5.\30\2\u00e3\u00ef\5\60\31\2\u00e4\u00ef\5\62\32\2")
        buf.write(u"\u00e5\u00ef\5\64\33\2\u00e6\u00ef\5\66\34\2\u00e7\u00ef")
        buf.write(u"\58\35\2\u00e8\u00ef\5:\36\2\u00e9\u00ef\5<\37\2\u00ea")
        buf.write(u"\u00ef\5> \2\u00eb\u00ef\5B\"\2\u00ec\u00ef\5D#\2\u00ed")
        buf.write(u"\u00ef\5F$\2\u00ee\u00d0\3\2\2\2\u00ee\u00d1\3\2\2\2")
        buf.write(u"\u00ee\u00d2\3\2\2\2\u00ee\u00d3\3\2\2\2\u00ee\u00d4")
        buf.write(u"\3\2\2\2\u00ee\u00d5\3\2\2\2\u00ee\u00d6\3\2\2\2\u00ee")
        buf.write(u"\u00d7\3\2\2\2\u00ee\u00d8\3\2\2\2\u00ee\u00d9\3\2\2")
        buf.write(u"\2\u00ee\u00da\3\2\2\2\u00ee\u00db\3\2\2\2\u00ee\u00dc")
        buf.write(u"\3\2\2\2\u00ee\u00dd\3\2\2\2\u00ee\u00de\3\2\2\2\u00ee")
        buf.write(u"\u00df\3\2\2\2\u00ee\u00e0\3\2\2\2\u00ee\u00e1\3\2\2")
        buf.write(u"\2\u00ee\u00e2\3\2\2\2\u00ee\u00e3\3\2\2\2\u00ee\u00e4")
        buf.write(u"\3\2\2\2\u00ee\u00e5\3\2\2\2\u00ee\u00e6\3\2\2\2\u00ee")
        buf.write(u"\u00e7\3\2\2\2\u00ee\u00e8\3\2\2\2\u00ee\u00e9\3\2\2")
        buf.write(u"\2\u00ee\u00ea\3\2\2\2\u00ee\u00eb\3\2\2\2\u00ee\u00ec")
        buf.write(u"\3\2\2\2\u00ee\u00ed\3\2\2\2\u00ef\t\3\2\2\2\u00f0\u00f1")
        buf.write(u"\7 \2\2\u00f1\u00f5\7\u0084\2\2\u00f2\u00f3\5\u0086D")
        buf.write(u"\2\u00f3\u00f4\7\4\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00f2")
        buf.write(u"\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write(u"\u0100\5\u0088E\2\u00f8\u00f9\7{\2\2\u00f9\u00fa\7\u0088")
        buf.write(u"\2\2\u00fa\u0101\5\u008cG\2\u00fb\u00fd\7\35\2\2\u00fc")
        buf.write(u"\u00fe\7\60\2\2\u00fd\u00fc\3\2\2\2\u00fd\u00fe\3\2\2")
        buf.write(u"\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\5H%\2\u0100\u00f8")
        buf.write(u"\3\2\2\2\u0100\u00fb\3\2\2\2\u0101\13\3\2\2\2\u0102\u0109")
        buf.write(u"\7!\2\2\u0103\u010a\5\u0086D\2\u0104\u010a\5\u008aF\2")
        buf.write(u"\u0105\u0106\5\u0086D\2\u0106\u0107\7\4\2\2\u0107\u0108")
        buf.write(u"\5\u008aF\2\u0108\u010a\3\2\2\2\u0109\u0103\3\2\2\2\u0109")
        buf.write(u"\u0104\3\2\2\2\u0109\u0105\3\2\2\2\u0109\u010a\3\2\2")
        buf.write(u"\2\u010a\r\3\2\2\2\u010b\u010d\7%\2\2\u010c\u010e\79")
        buf.write(u"\2\2\u010d\u010c\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f")
        buf.write(u"\3\2\2\2\u010f\u0110\5P)\2\u0110\u0111\7#\2\2\u0111\u0112")
        buf.write(u"\5\u0086D\2\u0112\17\3\2\2\2\u0113\u0115\7(\2\2\u0114")
        buf.write(u"\u0116\t\2\2\2\u0115\u0114\3\2\2\2\u0115\u0116\3\2\2")
        buf.write(u"\2\u0116\u011b\3\2\2\2\u0117\u0119\7\u0089\2\2\u0118")
        buf.write(u"\u011a\5\u00a2R\2\u0119\u0118\3\2\2\2\u0119\u011a\3\2")
        buf.write(u"\2\2\u011a\u011c\3\2\2\2\u011b\u0117\3\2\2\2\u011b\u011c")
        buf.write(u"\3\2\2\2\u011c\21\3\2\2\2\u011d\u0122\t\3\2\2\u011e\u0120")
        buf.write(u"\7\u0089\2\2\u011f\u0121\5\u00a2R\2\u0120\u011f\3\2\2")
        buf.write(u"\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2\u0122\u011e")
        buf.write(u"\3\2\2\2\u0122\u0123\3\2\2\2\u0123\23\3\2\2\2\u0124\u0126")
        buf.write(u"\7\u0095\2\2\u0125\u0127\7v\2\2\u0126\u0125\3\2\2\2\u0126")
        buf.write(u"\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012d\5b\62")
        buf.write(u"\2\u0129\u012a\7\7\2\2\u012a\u012c\5b\62\2\u012b\u0129")
        buf.write(u"\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b\3\2\2\2\u012d")
        buf.write(u"\u012e\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2")
        buf.write(u"\2\u0130\u0124\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132")
        buf.write(u"\3\2\2\2\u0132\u013c\5n8\2\u0133\u0135\7\u008b\2\2\u0134")
        buf.write(u"\u0136\7\37\2\2\u0135\u0134\3\2\2\2\u0135\u0136\3\2\2")
        buf.write(u"\2\u0136\u013a\3\2\2\2\u0137\u013a\7\\\2\2\u0138\u013a")
        buf.write(u"\7F\2\2\u0139\u0133\3\2\2\2\u0139\u0137\3\2\2\2\u0139")
        buf.write(u"\u0138\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013d\5n8\2")
        buf.write(u"\u013c\u0139\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013c")
        buf.write(u"\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u014a\3\2\2\2\u0140")
        buf.write(u"\u0141\7o\2\2\u0141\u0142\7*\2\2\u0142\u0147\5^\60\2")
        buf.write(u"\u0143\u0144\7\7\2\2\u0144\u0146\5^\60\2\u0145\u0143")
        buf.write(u"\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2\u0147")
        buf.write(u"\u0148\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u0147\3\2\2")
        buf.write(u"\2\u014a\u0140\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u0152")
        buf.write(u"\3\2\2\2\u014c\u014d\7d\2\2\u014d\u0150\5P)\2\u014e\u014f")
        buf.write(u"\t\4\2\2\u014f\u0151\5P)\2\u0150\u014e\3\2\2\2\u0150")
        buf.write(u"\u0151\3\2\2\2\u0151\u0153\3\2\2\2\u0152\u014c\3\2\2")
        buf.write(u"\2\u0152\u0153\3\2\2\2\u0153\25\3\2\2\2\u0154\u0156\7")
        buf.write(u"\64\2\2\u0155\u0157\7\u008c\2\2\u0156\u0155\3\2\2\2\u0156")
        buf.write(u"\u0157\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015c\7V\2\2")
        buf.write(u"\u0159\u015a\7R\2\2\u015a\u015b\7h\2\2\u015b\u015d\7")
        buf.write(u"H\2\2\u015c\u0159\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u0161")
        buf.write(u"\3\2\2\2\u015e\u015f\5\u0086D\2\u015f\u0160\7\4\2\2\u0160")
        buf.write(u"\u0162\3\2\2\2\u0161\u015e\3\2\2\2\u0161\u0162\3\2\2")
        buf.write(u"\2\u0162\u0163\3\2\2\2\u0163\u0164\5\u0094K\2\u0164\u0165")
        buf.write(u"\7m\2\2\u0165\u0166\5\u0088E\2\u0166\u0167\7\5\2\2\u0167")
        buf.write(u"\u016c\5V,\2\u0168\u0169\7\7\2\2\u0169\u016b\5V,\2\u016a")
        buf.write(u"\u0168\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2")
        buf.write(u"\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e\u016c")
        buf.write(u"\3\2\2\2\u016f\u0172\7\6\2\2\u0170\u0171\7\u0094\2\2")
        buf.write(u"\u0171\u0173\5P)\2\u0172\u0170\3\2\2\2\u0172\u0173\3")
        buf.write(u"\2\2\2\u0173\27\3\2\2\2\u0174\u0176\7\64\2\2\u0175\u0177")
        buf.write(u"\t\5\2\2\u0176\u0175\3\2\2\2\u0176\u0177\3\2\2\2\u0177")
        buf.write(u"\u0178\3\2\2\2\u0178\u017c\7\u0084\2\2\u0179\u017a\7")
        buf.write(u"R\2\2\u017a\u017b\7h\2\2\u017b\u017d\7H\2\2\u017c\u0179")
        buf.write(u"\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u0181\3\2\2\2\u017e")
        buf.write(u"\u017f\5\u0086D\2\u017f\u0180\7\4\2\2\u0180\u0182\3\2")
        buf.write(u"\2\2\u0181\u017e\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183")
        buf.write(u"\3\2\2\2\u0183\u019b\5\u0088E\2\u0184\u0185\7\5\2\2\u0185")
        buf.write(u"\u018a\5H%\2\u0186\u0187\7\7\2\2\u0187\u0189\5H%\2\u0188")
        buf.write(u"\u0186\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2")
        buf.write(u"\2\u018a\u018b\3\2\2\2\u018b\u0191\3\2\2\2\u018c\u018a")
        buf.write(u"\3\2\2\2\u018d\u018e\7\7\2\2\u018e\u0190\5X-\2\u018f")
        buf.write(u"\u018d\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2")
        buf.write(u"\2\u0191\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u0191")
        buf.write(u"\3\2\2\2\u0194\u0197\7\6\2\2\u0195\u0196\7\u0096\2\2")
        buf.write(u"\u0196\u0198\7\u0097\2\2\u0197\u0195\3\2\2\2\u0197\u0198")
        buf.write(u"\3\2\2\2\u0198\u019c\3\2\2\2\u0199\u019a\7#\2\2\u019a")
        buf.write(u"\u019c\5> \2\u019b\u0184\3\2\2\2\u019b\u0199\3\2\2\2")
        buf.write(u"\u019c\31\3\2\2\2\u019d\u019f\7\64\2\2\u019e\u01a0\t")
        buf.write(u"\5\2\2\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0")
        buf.write(u"\u01a1\3\2\2\2\u01a1\u01a5\7\u008a\2\2\u01a2\u01a3\7")
        buf.write(u"R\2\2\u01a3\u01a4\7h\2\2\u01a4\u01a6\7H\2\2\u01a5\u01a2")
        buf.write(u"\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01aa\3\2\2\2\u01a7")
        buf.write(u"\u01a8\5\u0086D\2\u01a8\u01a9\7\4\2\2\u01a9\u01ab\3\2")
        buf.write(u"\2\2\u01aa\u01a7\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac")
        buf.write(u"\3\2\2\2\u01ac\u01b1\5\u0096L\2\u01ad\u01b2\7\'\2\2\u01ae")
        buf.write(u"\u01b2\7\36\2\2\u01af\u01b0\7[\2\2\u01b0\u01b2\7k\2\2")
        buf.write(u"\u01b1\u01ad\3\2\2\2\u01b1\u01ae\3\2\2\2\u01b1\u01af")
        buf.write(u"\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01c1\3\2\2\2\u01b3")
        buf.write(u"\u01c2\7=\2\2\u01b4\u01c2\7Z\2\2\u01b5\u01bf\7\u008d")
        buf.write(u"\2\2\u01b6\u01b7\7k\2\2\u01b7\u01bc\5\u008eH\2\u01b8")
        buf.write(u"\u01b9\7\7\2\2\u01b9\u01bb\5\u008eH\2\u01ba\u01b8\3\2")
        buf.write(u"\2\2\u01bb\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd")
        buf.write(u"\3\2\2\2\u01bd\u01c0\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf")
        buf.write(u"\u01b6\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2\3\2\2")
        buf.write(u"\2\u01c1\u01b3\3\2\2\2\u01c1\u01b4\3\2\2\2\u01c1\u01b5")
        buf.write(u"\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c7\7m\2\2\u01c4")
        buf.write(u"\u01c5\5\u0086D\2\u01c5\u01c6\7\4\2\2\u01c6\u01c8\3\2")
        buf.write(u"\2\2\u01c7\u01c4\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9")
        buf.write(u"\3\2\2\2\u01c9\u01cd\5\u0088E\2\u01ca\u01cb\7K\2\2\u01cb")
        buf.write(u"\u01cc\7B\2\2\u01cc\u01ce\7\u0080\2\2\u01cd\u01ca\3\2")
        buf.write(u"\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01d0")
        buf.write(u"\7\u0093\2\2\u01d0\u01d2\5P)\2\u01d1\u01cf\3\2\2\2\u01d1")
        buf.write(u"\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01dc\7(\2\2")
        buf.write(u"\u01d4\u01d9\5B\"\2\u01d5\u01d9\5\60\31\2\u01d6\u01d9")
        buf.write(u"\5 \21\2\u01d7\u01d9\5> \2\u01d8\u01d4\3\2\2\2\u01d8")
        buf.write(u"\u01d5\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d8\u01d7\3\2\2")
        buf.write(u"\2\u01d9\u01da\3\2\2\2\u01da\u01db\7\3\2\2\u01db\u01dd")
        buf.write(u"\3\2\2\2\u01dc\u01d8\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write(u"\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0\3\2\2")
        buf.write(u"\2\u01e0\u01e1\7D\2\2\u01e1\33\3\2\2\2\u01e2\u01e4\7")
        buf.write(u"\64\2\2\u01e3\u01e5\t\5\2\2\u01e4\u01e3\3\2\2\2\u01e4")
        buf.write(u"\u01e5\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01ea\7\u0091")
        buf.write(u"\2\2\u01e7\u01e8\7R\2\2\u01e8\u01e9\7h\2\2\u01e9\u01eb")
        buf.write(u"\7H\2\2\u01ea\u01e7\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb")
        buf.write(u"\u01ef\3\2\2\2\u01ec\u01ed\5\u0086D\2\u01ed\u01ee\7\4")
        buf.write(u"\2\2\u01ee\u01f0\3\2\2\2\u01ef\u01ec\3\2\2\2\u01ef\u01f0")
        buf.write(u"\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2\5\u0098M\2\u01f2")
        buf.write(u"\u01f3\7#\2\2\u01f3\u01f4\5> \2\u01f4\35\3\2\2\2\u01f5")
        buf.write(u"\u01f6\7\64\2\2\u01f6\u01f7\7\u0092\2\2\u01f7\u01fb\7")
        buf.write(u"\u0084\2\2\u01f8\u01f9\7R\2\2\u01f9\u01fa\7h\2\2\u01fa")
        buf.write(u"\u01fc\7H\2\2\u01fb\u01f8\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write(u"\u01fc\u0200\3\2\2\2\u01fd\u01fe\5\u0086D\2\u01fe\u01ff")
        buf.write(u"\7\4\2\2\u01ff\u0201\3\2\2\2\u0200\u01fd\3\2\2\2\u0200")
        buf.write(u"\u0201\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0203\5\u0088")
        buf.write(u"E\2\u0203\u0204\7\u008e\2\2\u0204\u0210\5\u009aN\2\u0205")
        buf.write(u"\u0206\7\5\2\2\u0206\u020b\5|?\2\u0207\u0208\7\7\2\2")
        buf.write(u"\u0208\u020a\5|?\2\u0209\u0207\3\2\2\2\u020a\u020d\3")
        buf.write(u"\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c\3\2\2\2\u020c")
        buf.write(u"\u020e\3\2\2\2\u020d\u020b\3\2\2\2\u020e\u020f\7\6\2")
        buf.write(u"\2\u020f\u0211\3\2\2\2\u0210\u0205\3\2\2\2\u0210\u0211")
        buf.write(u"\3\2\2\2\u0211\37\3\2\2\2\u0212\u0214\5Z.\2\u0213\u0212")
        buf.write(u"\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\3\2\2\2\u0215")
        buf.write(u"\u0216\7=\2\2\u0216\u0217\7M\2\2\u0217\u021a\5\\/\2\u0218")
        buf.write(u"\u0219\7\u0094\2\2\u0219\u021b\5P)\2\u021a\u0218\3\2")
        buf.write(u"\2\2\u021a\u021b\3\2\2\2\u021b!\3\2\2\2\u021c\u021e\5")
        buf.write(u"Z.\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f")
        buf.write(u"\3\2\2\2\u021f\u0220\7=\2\2\u0220\u0221\7M\2\2\u0221")
        buf.write(u"\u0224\5\\/\2\u0222\u0223\7\u0094\2\2\u0223\u0225\5P")
        buf.write(u")\2\u0224\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0238")
        buf.write(u"\3\2\2\2\u0226\u0227\7o\2\2\u0227\u0228\7*\2\2\u0228")
        buf.write(u"\u022d\5^\60\2\u0229\u022a\7\7\2\2\u022a\u022c\5^\60")
        buf.write(u"\2\u022b\u0229\3\2\2\2\u022c\u022f\3\2\2\2\u022d\u022b")
        buf.write(u"\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0231\3\2\2\2\u022f")
        buf.write(u"\u022d\3\2\2\2\u0230\u0226\3\2\2\2\u0230\u0231\3\2\2")
        buf.write(u"\2\u0231\u0232\3\2\2\2\u0232\u0233\7d\2\2\u0233\u0236")
        buf.write(u"\5P)\2\u0234\u0235\t\4\2\2\u0235\u0237\5P)\2\u0236\u0234")
        buf.write(u"\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0239\3\2\2\2\u0238")
        buf.write(u"\u0230\3\2\2\2\u0238\u0239\3\2\2\2\u0239#\3\2\2\2\u023a")
        buf.write(u"\u023c\7?\2\2\u023b\u023d\79\2\2\u023c\u023b\3\2\2\2")
        buf.write(u"\u023c\u023d\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f")
        buf.write(u"\5\u0086D\2\u023f%\3\2\2\2\u0240\u0241\7A\2\2\u0241\u0244")
        buf.write(u"\7V\2\2\u0242\u0243\7R\2\2\u0243\u0245\7H\2\2\u0244\u0242")
        buf.write(u"\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0249\3\2\2\2\u0246")
        buf.write(u"\u0247\5\u0086D\2\u0247\u0248\7\4\2\2\u0248\u024a\3\2")
        buf.write(u"\2\2\u0249\u0246\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024b")
        buf.write(u"\3\2\2\2\u024b\u024c\5\u0094K\2\u024c\'\3\2\2\2\u024d")
        buf.write(u"\u024e\7A\2\2\u024e\u0251\7\u0084\2\2\u024f\u0250\7R")
        buf.write(u"\2\2\u0250\u0252\7H\2\2\u0251\u024f\3\2\2\2\u0251\u0252")
        buf.write(u"\3\2\2\2\u0252\u0256\3\2\2\2\u0253\u0254\5\u0086D\2\u0254")
        buf.write(u"\u0255\7\4\2\2\u0255\u0257\3\2\2\2\u0256\u0253\3\2\2")
        buf.write(u"\2\u0256\u0257\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259")
        buf.write(u"\5\u0088E\2\u0259)\3\2\2\2\u025a\u025b\7A\2\2\u025b\u025e")
        buf.write(u"\7\u008a\2\2\u025c\u025d\7R\2\2\u025d\u025f\7H\2\2\u025e")
        buf.write(u"\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0263\3\2\2")
        buf.write(u"\2\u0260\u0261\5\u0086D\2\u0261\u0262\7\4\2\2\u0262\u0264")
        buf.write(u"\3\2\2\2\u0263\u0260\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write(u"\u0265\3\2\2\2\u0265\u0266\5\u0096L\2\u0266+\3\2\2\2")
        buf.write(u"\u0267\u0268\7A\2\2\u0268\u026b\7\u0091\2\2\u0269\u026a")
        buf.write(u"\7R\2\2\u026a\u026c\7H\2\2\u026b\u0269\3\2\2\2\u026b")
        buf.write(u"\u026c\3\2\2\2\u026c\u0270\3\2\2\2\u026d\u026e\5\u0086")
        buf.write(u"D\2\u026e\u026f\7\4\2\2\u026f\u0271\3\2\2\2\u0270\u026d")
        buf.write(u"\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write(u"\u0273\5\u0098M\2\u0273-\3\2\2\2\u0274\u0276\7\u0095")
        buf.write(u"\2\2\u0275\u0277\7v\2\2\u0276\u0275\3\2\2\2\u0276\u0277")
        buf.write(u"\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027d\5b\62\2\u0279")
        buf.write(u"\u027a\7\7\2\2\u027a\u027c\5b\62\2\u027b\u0279\3\2\2")
        buf.write(u"\2\u027c\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d\u027e")
        buf.write(u"\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2\u0280")
        buf.write(u"\u0274\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3\2\2")
        buf.write(u"\2\u0282\u0288\5n8\2\u0283\u0284\5p9\2\u0284\u0285\5")
        buf.write(u"n8\2\u0285\u0287\3\2\2\2\u0286\u0283\3\2\2\2\u0287\u028a")
        buf.write(u"\3\2\2\2\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write(u"\u0295\3\2\2\2\u028a\u0288\3\2\2\2\u028b\u028c\7o\2\2")
        buf.write(u"\u028c\u028d\7*\2\2\u028d\u0292\5^\60\2\u028e\u028f\7")
        buf.write(u"\7\2\2\u028f\u0291\5^\60\2\u0290\u028e\3\2\2\2\u0291")
        buf.write(u"\u0294\3\2\2\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2")
        buf.write(u"\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2\u0295\u028b")
        buf.write(u"\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u029d\3\2\2\2\u0297")
        buf.write(u"\u0298\7d\2\2\u0298\u029b\5P)\2\u0299\u029a\t\4\2\2\u029a")
        buf.write(u"\u029c\5P)\2\u029b\u0299\3\2\2\2\u029b\u029c\3\2\2\2")
        buf.write(u"\u029c\u029e\3\2\2\2\u029d\u0297\3\2\2\2\u029d\u029e")
        buf.write(u"\3\2\2\2\u029e/\3\2\2\2\u029f\u02a1\5Z.\2\u02a0\u029f")
        buf.write(u"\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02b3\3\2\2\2\u02a2")
        buf.write(u"\u02b4\7Z\2\2\u02a3\u02b4\7|\2\2\u02a4\u02a5\7Z\2\2\u02a5")
        buf.write(u"\u02a6\7n\2\2\u02a6\u02b4\7|\2\2\u02a7\u02a8\7Z\2\2\u02a8")
        buf.write(u"\u02a9\7n\2\2\u02a9\u02b4\7\177\2\2\u02aa\u02ab\7Z\2")
        buf.write(u"\2\u02ab\u02ac\7n\2\2\u02ac\u02b4\7\33\2\2\u02ad\u02ae")
        buf.write(u"\7Z\2\2\u02ae\u02af\7n\2\2\u02af\u02b4\7J\2\2\u02b0\u02b1")
        buf.write(u"\7Z\2\2\u02b1\u02b2\7n\2\2\u02b2\u02b4\7S\2\2\u02b3\u02a2")
        buf.write(u"\3\2\2\2\u02b3\u02a3\3\2\2\2\u02b3\u02a4\3\2\2\2\u02b3")
        buf.write(u"\u02a7\3\2\2\2\u02b3\u02aa\3\2\2\2\u02b3\u02ad\3\2\2")
        buf.write(u"\2\u02b3\u02b0\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b9")
        buf.write(u"\7]\2\2\u02b6\u02b7\5\u0086D\2\u02b7\u02b8\7\4\2\2\u02b8")
        buf.write(u"\u02ba\3\2\2\2\u02b9\u02b6\3\2\2\2\u02b9\u02ba\3\2\2")
        buf.write(u"\2\u02ba\u02bb\3\2\2\2\u02bb\u02c7\5\u0088E\2\u02bc\u02bd")
        buf.write(u"\7\5\2\2\u02bd\u02c2\5\u008eH\2\u02be\u02bf\7\7\2\2\u02bf")
        buf.write(u"\u02c1\5\u008eH\2\u02c0\u02be\3\2\2\2\u02c1\u02c4\3\2")
        buf.write(u"\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c5")
        buf.write(u"\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5\u02c6\7\6\2\2\u02c6")
        buf.write(u"\u02c8\3\2\2\2\u02c7\u02bc\3\2\2\2\u02c7\u02c8\3\2\2")
        buf.write(u"\2\u02c8\u02e8\3\2\2\2\u02c9\u02ca\7\u0090\2\2\u02ca")
        buf.write(u"\u02cb\7\5\2\2\u02cb\u02d0\5P)\2\u02cc\u02cd\7\7\2\2")
        buf.write(u"\u02cd\u02cf\5P)\2\u02ce\u02cc\3\2\2\2\u02cf\u02d2\3")
        buf.write(u"\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1")
        buf.write(u"\u02d3\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02e2\7\6\2")
        buf.write(u"\2\u02d4\u02d5\7\7\2\2\u02d5\u02d6\7\5\2\2\u02d6\u02db")
        buf.write(u"\5P)\2\u02d7\u02d8\7\7\2\2\u02d8\u02da\5P)\2\u02d9\u02d7")
        buf.write(u"\3\2\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9\3\2\2\2\u02db")
        buf.write(u"\u02dc\3\2\2\2\u02dc\u02de\3\2\2\2\u02dd\u02db\3\2\2")
        buf.write(u"\2\u02de\u02df\7\6\2\2\u02df\u02e1\3\2\2\2\u02e0\u02d4")
        buf.write(u"\3\2\2\2\u02e1\u02e4\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2")
        buf.write(u"\u02e3\3\2\2\2\u02e3\u02e9\3\2\2\2\u02e4\u02e2\3\2\2")
        buf.write(u"\2\u02e5\u02e9\5> \2\u02e6\u02e7\7:\2\2\u02e7\u02e9\7")
        buf.write(u"\u0090\2\2\u02e8\u02c9\3\2\2\2\u02e8\u02e5\3\2\2\2\u02e8")
        buf.write(u"\u02e6\3\2\2\2\u02e9\61\3\2\2\2\u02ea\u02ee\7r\2\2\u02eb")
        buf.write(u"\u02ec\5\u0086D\2\u02ec\u02ed\7\4\2\2\u02ed\u02ef\3\2")
        buf.write(u"\2\2\u02ee\u02eb\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0")
        buf.write(u"\3\2\2\2\u02f0\u02f7\5\u009cO\2\u02f1\u02f2\7\b\2\2\u02f2")
        buf.write(u"\u02f8\5`\61\2\u02f3\u02f4\7\5\2\2\u02f4\u02f5\5`\61")
        buf.write(u"\2\u02f5\u02f6\7\6\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02f1")
        buf.write(u"\3\2\2\2\u02f7\u02f3\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8")
        buf.write(u"\63\3\2\2\2\u02f9\u0304\7y\2\2\u02fa\u0305\5\u0090I\2")
        buf.write(u"\u02fb\u02fc\5\u0086D\2\u02fc\u02fd\7\4\2\2\u02fd\u02ff")
        buf.write(u"\3\2\2\2\u02fe\u02fb\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff")
        buf.write(u"\u0302\3\2\2\2\u0300\u0303\5\u0088E\2\u0301\u0303\5\u0094")
        buf.write(u"K\2\u0302\u0300\3\2\2\2\u0302\u0301\3\2\2\2\u0303\u0305")
        buf.write(u"\3\2\2\2\u0304\u02fa\3\2\2\2\u0304\u02fe\3\2\2\2\u0304")
        buf.write(u"\u0305\3\2\2\2\u0305\65\3\2\2\2\u0306\u0308\7z\2\2\u0307")
        buf.write(u"\u0309\7\u0081\2\2\u0308\u0307\3\2\2\2\u0308\u0309\3")
        buf.write(u"\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b\5\u009eP\2\u030b")
        buf.write(u"\67\3\2\2\2\u030c\u0311\7\177\2\2\u030d\u030f\7\u0089")
        buf.write(u"\2\2\u030e\u0310\5\u00a2R\2\u030f\u030e\3\2\2\2\u030f")
        buf.write(u"\u0310\3\2\2\2\u0310\u0312\3\2\2\2\u0311\u030d\3\2\2")
        buf.write(u"\2\u0311\u0312\3\2\2\2\u0312\u0318\3\2\2\2\u0313\u0315")
        buf.write(u"\7\u0088\2\2\u0314\u0316\7\u0081\2\2\u0315\u0314\3\2")
        buf.write(u"\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319")
        buf.write(u"\5\u009eP\2\u0318\u0313\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write(u"9\3\2\2\2\u031a\u031b\7\u0081\2\2\u031b\u031c\5\u009e")
        buf.write(u"P\2\u031c;\3\2\2\2\u031d\u031f\7\u0095\2\2\u031e\u0320")
        buf.write(u"\7v\2\2\u031f\u031e\3\2\2\2\u031f\u0320\3\2\2\2\u0320")
        buf.write(u"\u0321\3\2\2\2\u0321\u0326\5b\62\2\u0322\u0323\7\7\2")
        buf.write(u"\2\u0323\u0325\5b\62\2\u0324\u0322\3\2\2\2\u0325\u0328")
        buf.write(u"\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write(u"\u032a\3\2\2\2\u0328\u0326\3\2\2\2\u0329\u031d\3\2\2")
        buf.write(u"\2\u0329\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u0336")
        buf.write(u"\5n8\2\u032c\u032d\7o\2\2\u032d\u032e\7*\2\2\u032e\u0333")
        buf.write(u"\5^\60\2\u032f\u0330\7\7\2\2\u0330\u0332\5^\60\2\u0331")
        buf.write(u"\u032f\3\2\2\2\u0332\u0335\3\2\2\2\u0333\u0331\3\2\2")
        buf.write(u"\2\u0333\u0334\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333")
        buf.write(u"\3\2\2\2\u0336\u032c\3\2\2\2\u0336\u0337\3\2\2\2\u0337")
        buf.write(u"\u033e\3\2\2\2\u0338\u0339\7d\2\2\u0339\u033c\5P)\2\u033a")
        buf.write(u"\u033b\t\4\2\2\u033b\u033d\5P)\2\u033c\u033a\3\2\2\2")
        buf.write(u"\u033c\u033d\3\2\2\2\u033d\u033f\3\2\2\2\u033e\u0338")
        buf.write(u"\3\2\2\2\u033e\u033f\3\2\2\2\u033f=\3\2\2\2\u0340\u0342")
        buf.write(u"\7\u0095\2\2\u0341\u0343\7v\2\2\u0342\u0341\3\2\2\2\u0342")
        buf.write(u"\u0343\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0349\5b\62")
        buf.write(u"\2\u0345\u0346\7\7\2\2\u0346\u0348\5b\62\2\u0347\u0345")
        buf.write(u"\3\2\2\2\u0348\u034b\3\2\2\2\u0349\u0347\3\2\2\2\u0349")
        buf.write(u"\u034a\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u0349\3\2\2")
        buf.write(u"\2\u034c\u0340\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034e")
        buf.write(u"\3\2\2\2\u034e\u0354\5@!\2\u034f\u0350\5p9\2\u0350\u0351")
        buf.write(u"\5@!\2\u0351\u0353\3\2\2\2\u0352\u034f\3\2\2\2\u0353")
        buf.write(u"\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2")
        buf.write(u"\2\u0355\u0361\3\2\2\2\u0356\u0354\3\2\2\2\u0357\u0358")
        buf.write(u"\7o\2\2\u0358\u0359\7*\2\2\u0359\u035e\5^\60\2\u035a")
        buf.write(u"\u035b\7\7\2\2\u035b\u035d\5^\60\2\u035c\u035a\3\2\2")
        buf.write(u"\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f")
        buf.write(u"\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2\u0361")
        buf.write(u"\u0357\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0369\3\2\2")
        buf.write(u"\2\u0363\u0364\7d\2\2\u0364\u0367\5P)\2\u0365\u0366\t")
        buf.write(u"\4\2\2\u0366\u0368\5P)\2\u0367\u0365\3\2\2\2\u0367\u0368")
        buf.write(u"\3\2\2\2\u0368\u036a\3\2\2\2\u0369\u0363\3\2\2\2\u0369")
        buf.write(u"\u036a\3\2\2\2\u036a?\3\2\2\2\u036b\u036d\7\u0082\2\2")
        buf.write(u"\u036c\u036e\t\6\2\2\u036d\u036c\3\2\2\2\u036d\u036e")
        buf.write(u"\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0374\5d\63\2\u0370")
        buf.write(u"\u0371\7\7\2\2\u0371\u0373\5d\63\2\u0372\u0370\3\2\2")
        buf.write(u"\2\u0373\u0376\3\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375")
        buf.write(u"\3\2\2\2\u0375\u0383\3\2\2\2\u0376\u0374\3\2\2\2\u0377")
        buf.write(u"\u0381\7M\2\2\u0378\u037d\5f\64\2\u0379\u037a\7\7\2\2")
        buf.write(u"\u037a\u037c\5f\64\2\u037b\u0379\3\2\2\2\u037c\u037f")
        buf.write(u"\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2\u037e")
        buf.write(u"\u0382\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0382\5h\65")
        buf.write(u"\2\u0381\u0378\3\2\2\2\u0381\u0380\3\2\2\2\u0382\u0384")
        buf.write(u"\3\2\2\2\u0383\u0377\3\2\2\2\u0383\u0384\3\2\2\2\u0384")
        buf.write(u"\u0387\3\2\2\2\u0385\u0386\7\u0094\2\2\u0386\u0388\5")
        buf.write(u"P)\2\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0397")
        buf.write(u"\3\2\2\2\u0389\u038a\7P\2\2\u038a\u038b\7*\2\2\u038b")
        buf.write(u"\u0390\5P)\2\u038c\u038d\7\7\2\2\u038d\u038f\5P)\2\u038e")
        buf.write(u"\u038c\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e\3\2\2")
        buf.write(u"\2\u0390\u0391\3\2\2\2\u0391\u0395\3\2\2\2\u0392\u0390")
        buf.write(u"\3\2\2\2\u0393\u0394\7Q\2\2\u0394\u0396\5P)\2\u0395\u0393")
        buf.write(u"\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2\u0397")
        buf.write(u"\u0389\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u03b6\3\2\2")
        buf.write(u"\2\u0399\u039a\7\u0090\2\2\u039a\u039b\7\5\2\2\u039b")
        buf.write(u"\u03a0\5P)\2\u039c\u039d\7\7\2\2\u039d\u039f\5P)\2\u039e")
        buf.write(u"\u039c\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2")
        buf.write(u"\2\u03a0\u03a1\3\2\2\2\u03a1\u03a3\3\2\2\2\u03a2\u03a0")
        buf.write(u"\3\2\2\2\u03a3\u03b2\7\6\2\2\u03a4\u03a5\7\7\2\2\u03a5")
        buf.write(u"\u03a6\7\5\2\2\u03a6\u03ab\5P)\2\u03a7\u03a8\7\7\2\2")
        buf.write(u"\u03a8\u03aa\5P)\2\u03a9\u03a7\3\2\2\2\u03aa\u03ad\3")
        buf.write(u"\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac")
        buf.write(u"\u03ae\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae\u03af\7\6\2")
        buf.write(u"\2\u03af\u03b1\3\2\2\2\u03b0\u03a4\3\2\2\2\u03b1\u03b4")
        buf.write(u"\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3")
        buf.write(u"\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b5\u036b\3\2\2")
        buf.write(u"\2\u03b5\u0399\3\2\2\2\u03b6A\3\2\2\2\u03b7\u03b9\5Z")
        buf.write(u".\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba")
        buf.write(u"\3\2\2\2\u03ba\u03c5\7\u008d\2\2\u03bb\u03bc\7n\2\2\u03bc")
        buf.write(u"\u03c6\7\177\2\2\u03bd\u03be\7n\2\2\u03be\u03c6\7\33")
        buf.write(u"\2\2\u03bf\u03c0\7n\2\2\u03c0\u03c6\7|\2\2\u03c1\u03c2")
        buf.write(u"\7n\2\2\u03c2\u03c6\7J\2\2\u03c3\u03c4\7n\2\2\u03c4\u03c6")
        buf.write(u"\7S\2\2\u03c5\u03bb\3\2\2\2\u03c5\u03bd\3\2\2\2\u03c5")
        buf.write(u"\u03bf\3\2\2\2\u03c5\u03c1\3\2\2\2\u03c5\u03c3\3\2\2")
        buf.write(u"\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8")
        buf.write(u"\5\\/\2\u03c8\u03c9\7\u0083\2\2\u03c9\u03ca\5\u008eH")
        buf.write(u"\2\u03ca\u03cb\7\b\2\2\u03cb\u03d3\5P)\2\u03cc\u03cd")
        buf.write(u"\7\7\2\2\u03cd\u03ce\5\u008eH\2\u03ce\u03cf\7\b\2\2\u03cf")
        buf.write(u"\u03d0\5P)\2\u03d0\u03d2\3\2\2\2\u03d1\u03cc\3\2\2\2")
        buf.write(u"\u03d2\u03d5\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3\u03d4")
        buf.write(u"\3\2\2\2\u03d4\u03d8\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d6")
        buf.write(u"\u03d7\7\u0094\2\2\u03d7\u03d9\5P)\2\u03d8\u03d6\3\2")
        buf.write(u"\2\2\u03d8\u03d9\3\2\2\2\u03d9C\3\2\2\2\u03da\u03dc\5")
        buf.write(u"Z.\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd")
        buf.write(u"\3\2\2\2\u03dd\u03e8\7\u008d\2\2\u03de\u03df\7n\2\2\u03df")
        buf.write(u"\u03e9\7\177\2\2\u03e0\u03e1\7n\2\2\u03e1\u03e9\7\33")
        buf.write(u"\2\2\u03e2\u03e3\7n\2\2\u03e3\u03e9\7|\2\2\u03e4\u03e5")
        buf.write(u"\7n\2\2\u03e5\u03e9\7J\2\2\u03e6\u03e7\7n\2\2\u03e7\u03e9")
        buf.write(u"\7S\2\2\u03e8\u03de\3\2\2\2\u03e8\u03e0\3\2\2\2\u03e8")
        buf.write(u"\u03e2\3\2\2\2\u03e8\u03e4\3\2\2\2\u03e8\u03e6\3\2\2")
        buf.write(u"\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb")
        buf.write(u"\5\\/\2\u03eb\u03ec\7\u0083\2\2\u03ec\u03ed\5\u008eH")
        buf.write(u"\2\u03ed\u03ee\7\b\2\2\u03ee\u03f6\5P)\2\u03ef\u03f0")
        buf.write(u"\7\7\2\2\u03f0\u03f1\5\u008eH\2\u03f1\u03f2\7\b\2\2\u03f2")
        buf.write(u"\u03f3\5P)\2\u03f3\u03f5\3\2\2\2\u03f4\u03ef\3\2\2\2")
        buf.write(u"\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7")
        buf.write(u"\3\2\2\2\u03f7\u03fb\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9")
        buf.write(u"\u03fa\7\u0094\2\2\u03fa\u03fc\5P)\2\u03fb\u03f9\3\2")
        buf.write(u"\2\2\u03fb\u03fc\3\2\2\2\u03fc\u040f\3\2\2\2\u03fd\u03fe")
        buf.write(u"\7o\2\2\u03fe\u03ff\7*\2\2\u03ff\u0404\5^\60\2\u0400")
        buf.write(u"\u0401\7\7\2\2\u0401\u0403\5^\60\2\u0402\u0400\3\2\2")
        buf.write(u"\2\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405")
        buf.write(u"\3\2\2\2\u0405\u0408\3\2\2\2\u0406\u0404\3\2\2\2\u0407")
        buf.write(u"\u03fd\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3\2\2")
        buf.write(u"\2\u0409\u040a\7d\2\2\u040a\u040d\5P)\2\u040b\u040c\t")
        buf.write(u"\4\2\2\u040c\u040e\5P)\2\u040d\u040b\3\2\2\2\u040d\u040e")
        buf.write(u"\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u0407\3\2\2\2\u040f")
        buf.write(u"\u0410\3\2\2\2\u0410E\3\2\2\2\u0411\u0412\7\u008f\2\2")
        buf.write(u"\u0412G\3\2\2\2\u0413\u0415\5\u008eH\2\u0414\u0416\5")
        buf.write(u"J&\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u041a")
        buf.write(u"\3\2\2\2\u0417\u0419\5L\'\2\u0418\u0417\3\2\2\2\u0419")
        buf.write(u"\u041c\3\2\2\2\u041a\u0418\3\2\2\2\u041a\u041b\3\2\2")
        buf.write(u"\2\u041bI\3\2\2\2\u041c\u041a\3\2\2\2\u041d\u041f\5\u0082")
        buf.write(u"B\2\u041e\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u041e")
        buf.write(u"\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u042c\3\2\2\2\u0422")
        buf.write(u"\u0423\7\5\2\2\u0423\u0424\5t;\2\u0424\u0425\7\6\2\2")
        buf.write(u"\u0425\u042d\3\2\2\2\u0426\u0427\7\5\2\2\u0427\u0428")
        buf.write(u"\5t;\2\u0428\u0429\7\7\2\2\u0429\u042a\5t;\2\u042a\u042b")
        buf.write(u"\7\6\2\2\u042b\u042d\3\2\2\2\u042c\u0422\3\2\2\2\u042c")
        buf.write(u"\u0426\3\2\2\2\u042c\u042d\3\2\2\2\u042dK\3\2\2\2\u042e")
        buf.write(u"\u042f\7\63\2\2\u042f\u0431\5\u0082B\2\u0430\u042e\3")
        buf.write(u"\2\2\2\u0430\u0431\3\2\2\2\u0431\u0453\3\2\2\2\u0432")
        buf.write(u"\u0433\7s\2\2\u0433\u0435\7a\2\2\u0434\u0436\t\7\2\2")
        buf.write(u"\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437")
        buf.write(u"\3\2\2\2\u0437\u0439\5N(\2\u0438\u043a\7&\2\2\u0439\u0438")
        buf.write(u"\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u0454\3\2\2\2\u043b")
        buf.write(u"\u043d\7h\2\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write(u"\u043d\u043e\3\2\2\2\u043e\u043f\7j\2\2\u043f\u0454\5")
        buf.write(u"N(\2\u0440\u0441\7\u008c\2\2\u0441\u0454\5N(\2\u0442")
        buf.write(u"\u0443\7.\2\2\u0443\u0444\7\5\2\2\u0444\u0445\5P)\2\u0445")
        buf.write(u"\u0446\7\6\2\2\u0446\u0454\3\2\2\2\u0447\u044e\7:\2\2")
        buf.write(u"\u0448\u044f\5t;\2\u0449\u044f\5v<\2\u044a\u044b\7\5")
        buf.write(u"\2\2\u044b\u044c\5P)\2\u044c\u044d\7\6\2\2\u044d\u044f")
        buf.write(u"\3\2\2\2\u044e\u0448\3\2\2\2\u044e\u0449\3\2\2\2\u044e")
        buf.write(u"\u044a\3\2\2\2\u044f\u0454\3\2\2\2\u0450\u0451\7/\2\2")
        buf.write(u"\u0451\u0454\5\u0090I\2\u0452\u0454\5R*\2\u0453\u0432")
        buf.write(u"\3\2\2\2\u0453\u043c\3\2\2\2\u0453\u0440\3\2\2\2\u0453")
        buf.write(u"\u0442\3\2\2\2\u0453\u0447\3\2\2\2\u0453\u0450\3\2\2")
        buf.write(u"\2\u0453\u0452\3\2\2\2\u0454M\3\2\2\2\u0455\u0456\7m")
        buf.write(u"\2\2\u0456\u0457\7\62\2\2\u0457\u0459\t\b\2\2\u0458\u0455")
        buf.write(u"\3\2\2\2\u0458\u0459\3\2\2\2\u0459O\3\2\2\2\u045a\u045b")
        buf.write(u"\b)\1\2\u045b\u045c\5x=\2\u045c\u045d\5P)\27\u045d\u04a7")
        buf.write(u"\3\2\2\2\u045e\u04a7\5v<\2\u045f\u04a7\7\u0099\2\2\u0460")
        buf.write(u"\u0461\5\u0086D\2\u0461\u0462\7\4\2\2\u0462\u0464\3\2")
        buf.write(u"\2\2\u0463\u0460\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465")
        buf.write(u"\3\2\2\2\u0465\u0466\5\u0088E\2\u0466\u0467\7\4\2\2\u0467")
        buf.write(u"\u0469\3\2\2\2\u0468\u0463\3\2\2\2\u0468\u0469\3\2\2")
        buf.write(u"\2\u0469\u046a\3\2\2\2\u046a\u04a7\5\u008eH\2\u046b\u046c")
        buf.write(u"\5\u0084C\2\u046c\u0479\7\5\2\2\u046d\u046f\7@\2\2\u046e")
        buf.write(u"\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0470\3\2\2")
        buf.write(u"\2\u0470\u0475\5P)\2\u0471\u0472\7\7\2\2\u0472\u0474")
        buf.write(u"\5P)\2\u0473\u0471\3\2\2\2\u0474\u0477\3\2\2\2\u0475")
        buf.write(u"\u0473\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u047a\3\2\2")
        buf.write(u"\2\u0477\u0475\3\2\2\2\u0478\u047a\7\t\2\2\u0479\u046e")
        buf.write(u"\3\2\2\2\u0479\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a")
        buf.write(u"\u047b\3\2\2\2\u047b\u047c\7\6\2\2\u047c\u04a7\3\2\2")
        buf.write(u"\2\u047d\u047e\7\5\2\2\u047e\u047f\5P)\2\u047f\u0480")
        buf.write(u"\7\6\2\2\u0480\u04a7\3\2\2\2\u0481\u0482\7-\2\2\u0482")
        buf.write(u"\u0483\7\5\2\2\u0483\u0484\5P)\2\u0484\u0485\7#\2\2\u0485")
        buf.write(u"\u0486\5J&\2\u0486\u0487\7\6\2\2\u0487\u04a7\3\2\2\2")
        buf.write(u"\u0488\u048a\7h\2\2\u0489\u0488\3\2\2\2\u0489\u048a\3")
        buf.write(u"\2\2\2\u048a\u048b\3\2\2\2\u048b\u048d\7H\2\2\u048c\u0489")
        buf.write(u"\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2\u048e")
        buf.write(u"\u048f\7\5\2\2\u048f\u0490\5> \2\u0490\u0491\7\6\2\2")
        buf.write(u"\u0491\u04a7\3\2\2\2\u0492\u0494\7,\2\2\u0493\u0495\5")
        buf.write(u"P)\2\u0494\u0493\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u049b")
        buf.write(u"\3\2\2\2\u0496\u0497\7\u0093\2\2\u0497\u0498\5P)\2\u0498")
        buf.write(u"\u0499\7\u0087\2\2\u0499\u049a\5P)\2\u049a\u049c\3\2")
        buf.write(u"\2\2\u049b\u0496\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049b")
        buf.write(u"\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a1\3\2\2\2\u049f")
        buf.write(u"\u04a0\7C\2\2\u04a0\u04a2\5P)\2\u04a1\u049f\3\2\2\2\u04a1")
        buf.write(u"\u04a2\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\7D\2\2")
        buf.write(u"\u04a4\u04a7\3\2\2\2\u04a5\u04a7\5T+\2\u04a6\u045a\3")
        buf.write(u"\2\2\2\u04a6\u045e\3\2\2\2\u04a6\u045f\3\2\2\2\u04a6")
        buf.write(u"\u0468\3\2\2\2\u04a6\u046b\3\2\2\2\u04a6\u047d\3\2\2")
        buf.write(u"\2\u04a6\u0481\3\2\2\2\u04a6\u048c\3\2\2\2\u04a6\u0492")
        buf.write(u"\3\2\2\2\u04a6\u04a5\3\2\2\2\u04a7\u050c\3\2\2\2\u04a8")
        buf.write(u"\u04a9\f\26\2\2\u04a9\u04aa\7\r\2\2\u04aa\u050b\5P)\27")
        buf.write(u"\u04ab\u04ac\f\25\2\2\u04ac\u04ad\t\t\2\2\u04ad\u050b")
        buf.write(u"\5P)\26\u04ae\u04af\f\24\2\2\u04af\u04b0\t\n\2\2\u04b0")
        buf.write(u"\u050b\5P)\25\u04b1\u04b2\f\23\2\2\u04b2\u04b3\t\13\2")
        buf.write(u"\2\u04b3\u050b\5P)\24\u04b4\u04b5\f\22\2\2\u04b5\u04b6")
        buf.write(u"\t\f\2\2\u04b6\u050b\5P)\23\u04b7\u04c4\f\21\2\2\u04b8")
        buf.write(u"\u04c5\7\b\2\2\u04b9\u04c5\7\30\2\2\u04ba\u04c5\7\31")
        buf.write(u"\2\2\u04bb\u04c5\7\32\2\2\u04bc\u04c5\7^\2\2\u04bd\u04be")
        buf.write(u"\7^\2\2\u04be\u04c5\7h\2\2\u04bf\u04c5\7U\2\2\u04c0\u04c5")
        buf.write(u"\7c\2\2\u04c1\u04c5\7O\2\2\u04c2\u04c5\7e\2\2\u04c3\u04c5")
        buf.write(u"\7x\2\2\u04c4\u04b8\3\2\2\2\u04c4\u04b9\3\2\2\2\u04c4")
        buf.write(u"\u04ba\3\2\2\2\u04c4\u04bb\3\2\2\2\u04c4\u04bc\3\2\2")
        buf.write(u"\2\u04c4\u04bd\3\2\2\2\u04c4\u04bf\3\2\2\2\u04c4\u04c0")
        buf.write(u"\3\2\2\2\u04c4\u04c1\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4")
        buf.write(u"\u04c3\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u050b\5P)\22")
        buf.write(u"\u04c7\u04c8\f\20\2\2\u04c8\u04c9\7\"\2\2\u04c9\u050b")
        buf.write(u"\5P)\21\u04ca\u04cb\f\17\2\2\u04cb\u04cc\7n\2\2\u04cc")
        buf.write(u"\u050b\5P)\20\u04cd\u04ce\f\b\2\2\u04ce\u04d0\7^\2\2")
        buf.write(u"\u04cf\u04d1\7h\2\2\u04d0\u04cf\3\2\2\2\u04d0\u04d1\3")
        buf.write(u"\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u050b\5P)\t\u04d3\u04d5")
        buf.write(u"\f\7\2\2\u04d4\u04d6\7h\2\2\u04d5\u04d4\3\2\2\2\u04d5")
        buf.write(u"\u04d6\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8\7)\2\2")
        buf.write(u"\u04d8\u04d9\5P)\2\u04d9\u04da\7\"\2\2\u04da\u04db\5")
        buf.write(u"P)\b\u04db\u050b\3\2\2\2\u04dc\u04dd\f\13\2\2\u04dd\u04de")
        buf.write(u"\7/\2\2\u04de\u050b\5\u0090I\2\u04df\u04e1\f\n\2\2\u04e0")
        buf.write(u"\u04e2\7h\2\2\u04e1\u04e0\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write(u"\u04e2\u04e3\3\2\2\2\u04e3\u04e4\t\r\2\2\u04e4\u04e7")
        buf.write(u"\5P)\2\u04e5\u04e6\7E\2\2\u04e6\u04e8\5P)\2\u04e7\u04e5")
        buf.write(u"\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u050b\3\2\2\2\u04e9")
        buf.write(u"\u04ee\f\t\2\2\u04ea\u04ef\7_\2\2\u04eb\u04ef\7i\2\2")
        buf.write(u"\u04ec\u04ed\7h\2\2\u04ed\u04ef\7j\2\2\u04ee\u04ea\3")
        buf.write(u"\2\2\2\u04ee\u04eb\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ef")
        buf.write(u"\u050b\3\2\2\2\u04f0\u04f2\f\6\2\2\u04f1\u04f3\7h\2\2")
        buf.write(u"\u04f2\u04f1\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f4")
        buf.write(u"\3\2\2\2\u04f4\u0508\7U\2\2\u04f5\u04ff\7\5\2\2\u04f6")
        buf.write(u"\u0500\5> \2\u04f7\u04fc\5P)\2\u04f8\u04f9\7\7\2\2\u04f9")
        buf.write(u"\u04fb\5P)\2\u04fa\u04f8\3\2\2\2\u04fb\u04fe\3\2\2\2")
        buf.write(u"\u04fc\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u0500")
        buf.write(u"\3\2\2\2\u04fe\u04fc\3\2\2\2\u04ff\u04f6\3\2\2\2\u04ff")
        buf.write(u"\u04f7\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0501\3\2\2")
        buf.write(u"\2\u0501\u0509\7\6\2\2\u0502\u0503\5\u0086D\2\u0503\u0504")
        buf.write(u"\7\4\2\2\u0504\u0506\3\2\2\2\u0505\u0502\3\2\2\2\u0505")
        buf.write(u"\u0506\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0509\5\u0088")
        buf.write(u"E\2\u0508\u04f5\3\2\2\2\u0508\u0505\3\2\2\2\u0509\u050b")
        buf.write(u"\3\2\2\2\u050a\u04a8\3\2\2\2\u050a\u04ab\3\2\2\2\u050a")
        buf.write(u"\u04ae\3\2\2\2\u050a\u04b1\3\2\2\2\u050a\u04b4\3\2\2")
        buf.write(u"\2\u050a\u04b7\3\2\2\2\u050a\u04c7\3\2\2\2\u050a\u04ca")
        buf.write(u"\3\2\2\2\u050a\u04cd\3\2\2\2\u050a\u04d3\3\2\2\2\u050a")
        buf.write(u"\u04dc\3\2\2\2\u050a\u04df\3\2\2\2\u050a\u04e9\3\2\2")
        buf.write(u"\2\u050a\u04f0\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050a")
        buf.write(u"\3\2\2\2\u050c\u050d\3\2\2\2\u050dQ\3\2\2\2\u050e\u050c")
        buf.write(u"\3\2\2\2\u050f\u0510\7w\2\2\u0510\u051c\5\u0092J\2\u0511")
        buf.write(u"\u0512\7\5\2\2\u0512\u0517\5\u008eH\2\u0513\u0514\7\7")
        buf.write(u"\2\2\u0514\u0516\5\u008eH\2\u0515\u0513\3\2\2\2\u0516")
        buf.write(u"\u0519\3\2\2\2\u0517\u0515\3\2\2\2\u0517\u0518\3\2\2")
        buf.write(u"\2\u0518\u051a\3\2\2\2\u0519\u0517\3\2\2\2\u051a\u051b")
        buf.write(u"\7\6\2\2\u051b\u051d\3\2\2\2\u051c\u0511\3\2\2\2\u051c")
        buf.write(u"\u051d\3\2\2\2\u051d\u0530\3\2\2\2\u051e\u051f\7m\2\2")
        buf.write(u"\u051f\u0528\t\16\2\2\u0520\u0521\7\u0083\2\2\u0521\u0529")
        buf.write(u"\7j\2\2\u0522\u0523\7\u0083\2\2\u0523\u0529\7:\2\2\u0524")
        buf.write(u"\u0529\7+\2\2\u0525\u0529\7}\2\2\u0526\u0527\7g\2\2\u0527")
        buf.write(u"\u0529\7\34\2\2\u0528\u0520\3\2\2\2\u0528\u0522\3\2\2")
        buf.write(u"\2\u0528\u0524\3\2\2\2\u0528\u0525\3\2\2\2\u0528\u0526")
        buf.write(u"\3\2\2\2\u0529\u052d\3\2\2\2\u052a\u052b\7e\2\2\u052b")
        buf.write(u"\u052d\5\u0082B\2\u052c\u051e\3\2\2\2\u052c\u052a\3\2")
        buf.write(u"\2\2\u052d\u052f\3\2\2\2\u052e\u052c\3\2\2\2\u052f\u0532")
        buf.write(u"\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531")
        buf.write(u"\u053d\3\2\2\2\u0532\u0530\3\2\2\2\u0533\u0535\7h\2\2")
        buf.write(u"\u0534\u0533\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0536")
        buf.write(u"\3\2\2\2\u0536\u053b\7;\2\2\u0537\u0538\7X\2\2\u0538")
        buf.write(u"\u053c\7<\2\2\u0539\u053a\7X\2\2\u053a\u053c\7T\2\2\u053b")
        buf.write(u"\u0537\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2")
        buf.write(u"\2\u053c\u053e\3\2\2\2\u053d\u0534\3\2\2\2\u053d\u053e")
        buf.write(u"\3\2\2\2\u053eS\3\2\2\2\u053f\u0540\7u\2\2\u0540\u0545")
        buf.write(u"\7\5\2\2\u0541\u0546\7S\2\2\u0542\u0543\t\17\2\2\u0543")
        buf.write(u"\u0544\7\7\2\2\u0544\u0546\5z>\2\u0545\u0541\3\2\2\2")
        buf.write(u"\u0545\u0542\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548")
        buf.write(u"\7\6\2\2\u0548U\3\2\2\2\u0549\u054c\5\u008eH\2\u054a")
        buf.write(u"\u054b\7/\2\2\u054b\u054d\5\u0090I\2\u054c\u054a\3\2")
        buf.write(u"\2\2\u054c\u054d\3\2\2\2\u054d\u054f\3\2\2\2\u054e\u0550")
        buf.write(u"\t\7\2\2\u054f\u054e\3\2\2\2\u054f\u0550\3\2\2\2\u0550")
        buf.write(u"W\3\2\2\2\u0551\u0552\7\63\2\2\u0552\u0554\5\u0082B\2")
        buf.write(u"\u0553\u0551\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0579")
        buf.write(u"\3\2\2\2\u0555\u0556\7s\2\2\u0556\u0559\7a\2\2\u0557")
        buf.write(u"\u0559\7\u008c\2\2\u0558\u0555\3\2\2\2\u0558\u0557\3")
        buf.write(u"\2\2\2\u0559\u055a\3\2\2\2\u055a\u055b\7\5\2\2\u055b")
        buf.write(u"\u0560\5V,\2\u055c\u055d\7\7\2\2\u055d\u055f\5V,\2\u055e")
        buf.write(u"\u055c\3\2\2\2\u055f\u0562\3\2\2\2\u0560\u055e\3\2\2")
        buf.write(u"\2\u0560\u0561\3\2\2\2\u0561\u0563\3\2\2\2\u0562\u0560")
        buf.write(u"\3\2\2\2\u0563\u0564\7\6\2\2\u0564\u0565\5N(\2\u0565")
        buf.write(u"\u057a\3\2\2\2\u0566\u0567\7.\2\2\u0567\u0568\7\5\2\2")
        buf.write(u"\u0568\u0569\5P)\2\u0569\u056a\7\6\2\2\u056a\u057a\3")
        buf.write(u"\2\2\2\u056b\u056c\7L\2\2\u056c\u056d\7a\2\2\u056d\u056e")
        buf.write(u"\7\5\2\2\u056e\u0573\5\u008eH\2\u056f\u0570\7\7\2\2\u0570")
        buf.write(u"\u0572\5\u008eH\2\u0571\u056f\3\2\2\2\u0572\u0575\3\2")
        buf.write(u"\2\2\u0573\u0571\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576")
        buf.write(u"\3\2\2\2\u0575\u0573\3\2\2\2\u0576\u0577\7\6\2\2\u0577")
        buf.write(u"\u0578\5R*\2\u0578\u057a\3\2\2\2\u0579\u0558\3\2\2\2")
        buf.write(u"\u0579\u0566\3\2\2\2\u0579\u056b\3\2\2\2\u057aY\3\2\2")
        buf.write(u"\2\u057b\u057d\7\u0095\2\2\u057c\u057e\7v\2\2\u057d\u057c")
        buf.write(u"\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write(u"\u0580\5r:\2\u0580\u0581\7#\2\2\u0581\u0582\7\5\2\2\u0582")
        buf.write(u"\u0583\5> \2\u0583\u058d\7\6\2\2\u0584\u0585\7\7\2\2")
        buf.write(u"\u0585\u0586\5r:\2\u0586\u0587\7#\2\2\u0587\u0588\7\5")
        buf.write(u"\2\2\u0588\u0589\5> \2\u0589\u058a\7\6\2\2\u058a\u058c")
        buf.write(u"\3\2\2\2\u058b\u0584\3\2\2\2\u058c\u058f\3\2\2\2\u058d")
        buf.write(u"\u058b\3\2\2\2\u058d\u058e\3\2\2\2\u058e[\3\2\2\2\u058f")
        buf.write(u"\u058d\3\2\2\2\u0590\u0591\5\u0086D\2\u0591\u0592\7\4")
        buf.write(u"\2\2\u0592\u0594\3\2\2\2\u0593\u0590\3\2\2\2\u0593\u0594")
        buf.write(u"\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u059b\5\u0088E\2\u0596")
        buf.write(u"\u0597\7W\2\2\u0597\u0598\7*\2\2\u0598\u059c\5\u0094")
        buf.write(u"K\2\u0599\u059a\7h\2\2\u059a\u059c\7W\2\2\u059b\u0596")
        buf.write(u"\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c\3\2\2\2\u059c")
        buf.write(u"]\3\2\2\2\u059d\u05a0\5P)\2\u059e\u059f\7/\2\2\u059f")
        buf.write(u"\u05a1\5\u0090I\2\u05a0\u059e\3\2\2\2\u05a0\u05a1\3\2")
        buf.write(u"\2\2\u05a1\u05a3\3\2\2\2\u05a2\u05a4\t\7\2\2\u05a3\u05a2")
        buf.write(u"\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4_\3\2\2\2\u05a5\u05a9")
        buf.write(u"\5t;\2\u05a6\u05a9\5\u0082B\2\u05a7\u05a9\7\u009a\2\2")
        buf.write(u"\u05a8\u05a5\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a8\u05a7")
        buf.write(u"\3\2\2\2\u05a9a\3\2\2\2\u05aa\u05b6\5\u0088E\2\u05ab")
        buf.write(u"\u05ac\7\5\2\2\u05ac\u05b1\5\u008eH\2\u05ad\u05ae\7\7")
        buf.write(u"\2\2\u05ae\u05b0\5\u008eH\2\u05af\u05ad\3\2\2\2\u05b0")
        buf.write(u"\u05b3\3\2\2\2\u05b1\u05af\3\2\2\2\u05b1\u05b2\3\2\2")
        buf.write(u"\2\u05b2\u05b4\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b4\u05b5")
        buf.write(u"\7\6\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05ab\3\2\2\2\u05b6")
        buf.write(u"\u05b7\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05b9\7#\2\2")
        buf.write(u"\u05b9\u05ba\7\5\2\2\u05ba\u05bb\5> \2\u05bb\u05bc\7")
        buf.write(u"\6\2\2\u05bcc\3\2\2\2\u05bd\u05ca\7\t\2\2\u05be\u05bf")
        buf.write(u"\5\u0088E\2\u05bf\u05c0\7\4\2\2\u05c0\u05c1\7\t\2\2\u05c1")
        buf.write(u"\u05ca\3\2\2\2\u05c2\u05c7\5P)\2\u05c3\u05c5\7#\2\2\u05c4")
        buf.write(u"\u05c3\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c6\3\2\2")
        buf.write(u"\2\u05c6\u05c8\5~@\2\u05c7\u05c4\3\2\2\2\u05c7\u05c8")
        buf.write(u"\3\2\2\2\u05c8\u05ca\3\2\2\2\u05c9\u05bd\3\2\2\2\u05c9")
        buf.write(u"\u05be\3\2\2\2\u05c9\u05c2\3\2\2\2\u05cae\3\2\2\2\u05cb")
        buf.write(u"\u05cc\5\u0086D\2\u05cc\u05cd\7\4\2\2\u05cd\u05cf\3\2")
        buf.write(u"\2\2\u05ce\u05cb\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0")
        buf.write(u"\3\2\2\2\u05d0\u05d5\5\u0088E\2\u05d1\u05d3\7#\2\2\u05d2")
        buf.write(u"\u05d1\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\3\2\2")
        buf.write(u"\2\u05d4\u05d6\5\u00a0Q\2\u05d5\u05d2\3\2\2\2\u05d5\u05d6")
        buf.write(u"\3\2\2\2\u05d6\u05dc\3\2\2\2\u05d7\u05d8\7W\2\2\u05d8")
        buf.write(u"\u05d9\7*\2\2\u05d9\u05dd\5\u0094K\2\u05da\u05db\7h\2")
        buf.write(u"\2\u05db\u05dd\7W\2\2\u05dc\u05d7\3\2\2\2\u05dc\u05da")
        buf.write(u"\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05fb\3\2\2\2\u05de")
        buf.write(u"\u05e8\7\5\2\2\u05df\u05e4\5f\64\2\u05e0\u05e1\7\7\2")
        buf.write(u"\2\u05e1\u05e3\5f\64\2\u05e2\u05e0\3\2\2\2\u05e3\u05e6")
        buf.write(u"\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5")
        buf.write(u"\u05e9\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e7\u05e9\5h\65")
        buf.write(u"\2\u05e8\u05df\3\2\2\2\u05e8\u05e7\3\2\2\2\u05e9\u05ea")
        buf.write(u"\3\2\2\2\u05ea\u05ef\7\6\2\2\u05eb\u05ed\7#\2\2\u05ec")
        buf.write(u"\u05eb\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee\3\2\2")
        buf.write(u"\2\u05ee\u05f0\5\u00a0Q\2\u05ef\u05ec\3\2\2\2\u05ef\u05f0")
        buf.write(u"\3\2\2\2\u05f0\u05fb\3\2\2\2\u05f1\u05f2\7\5\2\2\u05f2")
        buf.write(u"\u05f3\5> \2\u05f3\u05f8\7\6\2\2\u05f4\u05f6\7#\2\2\u05f5")
        buf.write(u"\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\3\2\2")
        buf.write(u"\2\u05f7\u05f9\5\u00a0Q\2\u05f8\u05f5\3\2\2\2\u05f8\u05f9")
        buf.write(u"\3\2\2\2\u05f9\u05fb\3\2\2\2\u05fa\u05ce\3\2\2\2\u05fa")
        buf.write(u"\u05de\3\2\2\2\u05fa\u05f1\3\2\2\2\u05fbg\3\2\2\2\u05fc")
        buf.write(u"\u0603\5f\64\2\u05fd\u05fe\5j\66\2\u05fe\u05ff\5f\64")
        buf.write(u"\2\u05ff\u0600\5l\67\2\u0600\u0602\3\2\2\2\u0601\u05fd")
        buf.write(u"\3\2\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603")
        buf.write(u"\u0604\3\2\2\2\u0604i\3\2\2\2\u0605\u0603\3\2\2\2\u0606")
        buf.write(u"\u0614\7\7\2\2\u0607\u0609\7f\2\2\u0608\u0607\3\2\2\2")
        buf.write(u"\u0608\u0609\3\2\2\2\u0609\u0610\3\2\2\2\u060a\u060c")
        buf.write(u"\7b\2\2\u060b\u060d\7p\2\2\u060c\u060b\3\2\2\2\u060c")
        buf.write(u"\u060d\3\2\2\2\u060d\u0611\3\2\2\2\u060e\u0611\7Y\2\2")
        buf.write(u"\u060f\u0611\7\65\2\2\u0610\u060a\3\2\2\2\u0610\u060e")
        buf.write(u"\3\2\2\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611")
        buf.write(u"\u0612\3\2\2\2\u0612\u0614\7`\2\2\u0613\u0606\3\2\2\2")
        buf.write(u"\u0613\u0608\3\2\2\2\u0614k\3\2\2\2\u0615\u0616\7m\2")
        buf.write(u"\2\u0616\u0624\5P)\2\u0617\u0618\7\u008e\2\2\u0618\u0619")
        buf.write(u"\7\5\2\2\u0619\u061e\5\u008eH\2\u061a\u061b\7\7\2\2\u061b")
        buf.write(u"\u061d\5\u008eH\2\u061c\u061a\3\2\2\2\u061d\u0620\3\2")
        buf.write(u"\2\2\u061e\u061c\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0621")
        buf.write(u"\3\2\2\2\u0620\u061e\3\2\2\2\u0621\u0622\7\6\2\2\u0622")
        buf.write(u"\u0624\3\2\2\2\u0623\u0615\3\2\2\2\u0623\u0617\3\2\2")
        buf.write(u"\2\u0623\u0624\3\2\2\2\u0624m\3\2\2\2\u0625\u0627\7\u0082")
        buf.write(u"\2\2\u0626\u0628\t\6\2\2\u0627\u0626\3\2\2\2\u0627\u0628")
        buf.write(u"\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062e\5d\63\2\u062a")
        buf.write(u"\u062b\7\7\2\2\u062b\u062d\5d\63\2\u062c\u062a\3\2\2")
        buf.write(u"\2\u062d\u0630\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f")
        buf.write(u"\3\2\2\2\u062f\u063d\3\2\2\2\u0630\u062e\3\2\2\2\u0631")
        buf.write(u"\u063b\7M\2\2\u0632\u0637\5f\64\2\u0633\u0634\7\7\2\2")
        buf.write(u"\u0634\u0636\5f\64\2\u0635\u0633\3\2\2\2\u0636\u0639")
        buf.write(u"\3\2\2\2\u0637\u0635\3\2\2\2\u0637\u0638\3\2\2\2\u0638")
        buf.write(u"\u063c\3\2\2\2\u0639\u0637\3\2\2\2\u063a\u063c\5h\65")
        buf.write(u"\2\u063b\u0632\3\2\2\2\u063b\u063a\3\2\2\2\u063c\u063e")
        buf.write(u"\3\2\2\2\u063d\u0631\3\2\2\2\u063d\u063e\3\2\2\2\u063e")
        buf.write(u"\u0641\3\2\2\2\u063f\u0640\7\u0094\2\2\u0640\u0642\5")
        buf.write(u"P)\2\u0641\u063f\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0651")
        buf.write(u"\3\2\2\2\u0643\u0644\7P\2\2\u0644\u0645\7*\2\2\u0645")
        buf.write(u"\u064a\5P)\2\u0646\u0647\7\7\2\2\u0647\u0649\5P)\2\u0648")
        buf.write(u"\u0646\3\2\2\2\u0649\u064c\3\2\2\2\u064a\u0648\3\2\2")
        buf.write(u"\2\u064a\u064b\3\2\2\2\u064b\u064f\3\2\2\2\u064c\u064a")
        buf.write(u"\3\2\2\2\u064d\u064e\7Q\2\2\u064e\u0650\5P)\2\u064f\u064d")
        buf.write(u"\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0652\3\2\2\2\u0651")
        buf.write(u"\u0643\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0670\3\2\2")
        buf.write(u"\2\u0653\u0654\7\u0090\2\2\u0654\u0655\7\5\2\2\u0655")
        buf.write(u"\u065a\5P)\2\u0656\u0657\7\7\2\2\u0657\u0659\5P)\2\u0658")
        buf.write(u"\u0656\3\2\2\2\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2")
        buf.write(u"\2\u065a\u065b\3\2\2\2\u065b\u065d\3\2\2\2\u065c\u065a")
        buf.write(u"\3\2\2\2\u065d\u066c\7\6\2\2\u065e\u065f\7\7\2\2\u065f")
        buf.write(u"\u0660\7\5\2\2\u0660\u0665\5P)\2\u0661\u0662\7\7\2\2")
        buf.write(u"\u0662\u0664\5P)\2\u0663\u0661\3\2\2\2\u0664\u0667\3")
        buf.write(u"\2\2\2\u0665\u0663\3\2\2\2\u0665\u0666\3\2\2\2\u0666")
        buf.write(u"\u0668\3\2\2\2\u0667\u0665\3\2\2\2\u0668\u0669\7\6\2")
        buf.write(u"\2\u0669\u066b\3\2\2\2\u066a\u065e\3\2\2\2\u066b\u066e")
        buf.write(u"\3\2\2\2\u066c\u066a\3\2\2\2\u066c\u066d\3\2\2\2\u066d")
        buf.write(u"\u0670\3\2\2\2\u066e\u066c\3\2\2\2\u066f\u0625\3\2\2")
        buf.write(u"\2\u066f\u0653\3\2\2\2\u0670o\3\2\2\2\u0671\u0677\7\u008b")
        buf.write(u"\2\2\u0672\u0673\7\u008b\2\2\u0673\u0677\7\37\2\2\u0674")
        buf.write(u"\u0677\7\\\2\2\u0675\u0677\7F\2\2\u0676\u0671\3\2\2\2")
        buf.write(u"\u0676\u0672\3\2\2\2\u0676\u0674\3\2\2\2\u0676\u0675")
        buf.write(u"\3\2\2\2\u0677q\3\2\2\2\u0678\u0684\5\u0088E\2\u0679")
        buf.write(u"\u067a\7\5\2\2\u067a\u067f\5\u008eH\2\u067b\u067c\7\7")
        buf.write(u"\2\2\u067c\u067e\5\u008eH\2\u067d\u067b\3\2\2\2\u067e")
        buf.write(u"\u0681\3\2\2\2\u067f\u067d\3\2\2\2\u067f\u0680\3\2\2")
        buf.write(u"\2\u0680\u0682\3\2\2\2\u0681\u067f\3\2\2\2\u0682\u0683")
        buf.write(u"\7\6\2\2\u0683\u0685\3\2\2\2\u0684\u0679\3\2\2\2\u0684")
        buf.write(u"\u0685\3\2\2\2\u0685s\3\2\2\2\u0686\u0688\t\n\2\2\u0687")
        buf.write(u"\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0689\3\2\2")
        buf.write(u"\2\u0689\u068a\7\u0098\2\2\u068au\3\2\2\2\u068b\u068c")
        buf.write(u"\t\20\2\2\u068cw\3\2\2\2\u068d\u068e\t\21\2\2\u068ey")
        buf.write(u"\3\2\2\2\u068f\u0690\7\u009a\2\2\u0690{\3\2\2\2\u0691")
        buf.write(u"\u0694\5P)\2\u0692\u0694\5H%\2\u0693\u0691\3\2\2\2\u0693")
        buf.write(u"\u0692\3\2\2\2\u0694}\3\2\2\2\u0695\u0696\t\22\2\2\u0696")
        buf.write(u"\177\3\2\2\2\u0697\u0698\t\23\2\2\u0698\u0081\3\2\2\2")
        buf.write(u"\u0699\u069a\5\u00a4S\2\u069a\u0083\3\2\2\2\u069b\u069c")
        buf.write(u"\5\u00a4S\2\u069c\u0085\3\2\2\2\u069d\u069e\5\u00a4S")
        buf.write(u"\2\u069e\u0087\3\2\2\2\u069f\u06a0\5\u00a4S\2\u06a0\u0089")
        buf.write(u"\3\2\2\2\u06a1\u06a2\5\u00a4S\2\u06a2\u008b\3\2\2\2\u06a3")
        buf.write(u"\u06a4\5\u00a4S\2\u06a4\u008d\3\2\2\2\u06a5\u06a6\5\u00a4")
        buf.write(u"S\2\u06a6\u008f\3\2\2\2\u06a7\u06a8\5\u00a4S\2\u06a8")
        buf.write(u"\u0091\3\2\2\2\u06a9\u06aa\5\u00a4S\2\u06aa\u0093\3\2")
        buf.write(u"\2\2\u06ab\u06ac\5\u00a4S\2\u06ac\u0095\3\2\2\2\u06ad")
        buf.write(u"\u06ae\5\u00a4S\2\u06ae\u0097\3\2\2\2\u06af\u06b0\5\u00a4")
        buf.write(u"S\2\u06b0\u0099\3\2\2\2\u06b1\u06b2\5\u00a4S\2\u06b2")
        buf.write(u"\u009b\3\2\2\2\u06b3\u06b4\5\u00a4S\2\u06b4\u009d\3\2")
        buf.write(u"\2\2\u06b5\u06b6\5\u00a4S\2\u06b6\u009f\3\2\2\2\u06b7")
        buf.write(u"\u06b8\5\u00a4S\2\u06b8\u00a1\3\2\2\2\u06b9\u06ba\5\u00a4")
        buf.write(u"S\2\u06ba\u00a3\3\2\2\2\u06bb\u06c3\7\u0097\2\2\u06bc")
        buf.write(u"\u06c3\5\u0080A\2\u06bd\u06c3\7\u009a\2\2\u06be\u06bf")
        buf.write(u"\7\5\2\2\u06bf\u06c0\5\u00a4S\2\u06c0\u06c1\7\6\2\2\u06c1")
        buf.write(u"\u06c3\3\2\2\2\u06c2\u06bb\3\2\2\2\u06c2\u06bc\3\2\2")
        buf.write(u"\2\u06c2\u06bd\3\2\2\2\u06c2\u06be\3\2\2\2\u06c3\u00a5")
        buf.write(u"\3\2\2\2\u00f6\u00a8\u00aa\u00b4\u00bb\u00c0\u00c6\u00cc")
        buf.write(u"\u00ce\u00ee\u00f5\u00fd\u0100\u0109\u010d\u0115\u0119")
        buf.write(u"\u011b\u0120\u0122\u0126\u012d\u0130\u0135\u0139\u013e")
        buf.write(u"\u0147\u014a\u0150\u0152\u0156\u015c\u0161\u016c\u0172")
        buf.write(u"\u0176\u017c\u0181\u018a\u0191\u0197\u019b\u019f\u01a5")
        buf.write(u"\u01aa\u01b1\u01bc\u01bf\u01c1\u01c7\u01cd\u01d1\u01d8")
        buf.write(u"\u01de\u01e4\u01ea\u01ef\u01fb\u0200\u020b\u0210\u0213")
        buf.write(u"\u021a\u021d\u0224\u022d\u0230\u0236\u0238\u023c\u0244")
        buf.write(u"\u0249\u0251\u0256\u025e\u0263\u026b\u0270\u0276\u027d")
        buf.write(u"\u0280\u0288\u0292\u0295\u029b\u029d\u02a0\u02b3\u02b9")
        buf.write(u"\u02c2\u02c7\u02d0\u02db\u02e2\u02e8\u02ee\u02f7\u02fe")
        buf.write(u"\u0302\u0304\u0308\u030f\u0311\u0315\u0318\u031f\u0326")
        buf.write(u"\u0329\u0333\u0336\u033c\u033e\u0342\u0349\u034c\u0354")
        buf.write(u"\u035e\u0361\u0367\u0369\u036d\u0374\u037d\u0381\u0383")
        buf.write(u"\u0387\u0390\u0395\u0397\u03a0\u03ab\u03b2\u03b5\u03b8")
        buf.write(u"\u03c5\u03d3\u03d8\u03db\u03e8\u03f6\u03fb\u0404\u0407")
        buf.write(u"\u040d\u040f\u0415\u041a\u0420\u042c\u0430\u0435\u0439")
        buf.write(u"\u043c\u044e\u0453\u0458\u0463\u0468\u046e\u0475\u0479")
        buf.write(u"\u0489\u048c\u0494\u049d\u04a1\u04a6\u04c4\u04d0\u04d5")
        buf.write(u"\u04e1\u04e7\u04ee\u04f2\u04fc\u04ff\u0505\u0508\u050a")
        buf.write(u"\u050c\u0517\u051c\u0528\u052c\u0530\u0534\u053b\u053d")
        buf.write(u"\u0545\u054c\u054f\u0553\u0558\u0560\u0573\u0579\u057d")
        buf.write(u"\u058d\u0593\u059b\u05a0\u05a3\u05a8\u05b1\u05b6\u05c4")
        buf.write(u"\u05c7\u05c9\u05ce\u05d2\u05d5\u05dc\u05e4\u05e8\u05ec")
        buf.write(u"\u05ef\u05f5\u05f8\u05fa\u0603\u0608\u060c\u0610\u0613")
        buf.write(u"\u061e\u0623\u0627\u062e\u0637\u063b\u063d\u0641\u064a")
        buf.write(u"\u064f\u0651\u065a\u0665\u066c\u066f\u0676\u067f\u0684")
        buf.write(u"\u0687\u0693\u06c2")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLite.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"';'", u"'.'", u"'('", u"')'", u"','", 
                     u"'='", u"'*'", u"'+'", u"'-'", u"'~'", u"'||'", u"'/'", 
                     u"'%'", u"'<<'", u"'>>'", u"'&'", u"'|'", u"'<'", u"'<='", 
                     u"'>'", u"'>='", u"'=='", u"'!='", u"'<>'" ]

    symbolicNames = [ u"<INVALID>", u"SCOL", u"DOT", u"OPEN_PAR", u"CLOSE_PAR", 
                      u"COMMA", u"ASSIGN", u"STAR", u"PLUS", u"MINUS", u"TILDE", 
                      u"PIPE2", u"DIV", u"MOD", u"LT2", u"GT2", u"AMP", 
                      u"PIPE", u"LT", u"LT_EQ", u"GT", u"GT_EQ", u"EQ", 
                      u"NOT_EQ1", u"NOT_EQ2", u"K_ABORT", u"K_ACTION", u"K_ADD", 
                      u"K_AFTER", u"K_ALL", u"K_ALTER", u"K_ANALYZE", u"K_AND", 
                      u"K_AS", u"K_ASC", u"K_ATTACH", u"K_AUTOINCREMENT", 
                      u"K_BEFORE", u"K_BEGIN", u"K_BETWEEN", u"K_BY", u"K_CASCADE", 
                      u"K_CASE", u"K_CAST", u"K_CHECK", u"K_COLLATE", u"K_COLUMN", 
                      u"K_COMMIT", u"K_CONFLICT", u"K_CONSTRAINT", u"K_CREATE", 
                      u"K_CROSS", u"K_CURRENT_DATE", u"K_CURRENT_TIME", 
                      u"K_CURRENT_TIMESTAMP", u"K_DATABASE", u"K_DEFAULT", 
                      u"K_DEFERRABLE", u"K_DEFERRED", u"K_DELETE", u"K_DESC", 
                      u"K_DETACH", u"K_DISTINCT", u"K_DROP", u"K_EACH", 
                      u"K_ELSE", u"K_END", u"K_ESCAPE", u"K_EXCEPT", u"K_EXCLUSIVE", 
                      u"K_EXISTS", u"K_EXPLAIN", u"K_FAIL", u"K_FOR", u"K_FOREIGN", 
                      u"K_FROM", u"K_FULL", u"K_GLOB", u"K_GROUP", u"K_HAVING", 
                      u"K_IF", u"K_IGNORE", u"K_IMMEDIATE", u"K_IN", u"K_INDEX", 
                      u"K_INDEXED", u"K_INITIALLY", u"K_INNER", u"K_INSERT", 
                      u"K_INSTEAD", u"K_INTERSECT", u"K_INTO", u"K_IS", 
                      u"K_ISNULL", u"K_JOIN", u"K_KEY", u"K_LEFT", u"K_LIKE", 
                      u"K_LIMIT", u"K_MATCH", u"K_NATURAL", u"K_NO", u"K_NOT", 
                      u"K_NOTNULL", u"K_NULL", u"K_OF", u"K_OFFSET", u"K_ON", 
                      u"K_OR", u"K_ORDER", u"K_OUTER", u"K_PLAN", u"K_PRAGMA", 
                      u"K_PRIMARY", u"K_QUERY", u"K_RAISE", u"K_RECURSIVE", 
                      u"K_REFERENCES", u"K_REGEXP", u"K_REINDEX", u"K_RELEASE", 
                      u"K_RENAME", u"K_REPLACE", u"K_RESTRICT", u"K_RIGHT", 
                      u"K_ROLLBACK", u"K_ROW", u"K_SAVEPOINT", u"K_SELECT", 
                      u"K_SET", u"K_TABLE", u"K_TEMP", u"K_TEMPORARY", u"K_THEN", 
                      u"K_TO", u"K_TRANSACTION", u"K_TRIGGER", u"K_UNION", 
                      u"K_UNIQUE", u"K_UPDATE", u"K_USING", u"K_VACUUM", 
                      u"K_VALUES", u"K_VIEW", u"K_VIRTUAL", u"K_WHEN", u"K_WHERE", 
                      u"K_WITH", u"K_WITHOUT", u"IDENTIFIER", u"NUMERIC_LITERAL", 
                      u"BIND_PARAMETER", u"STRING_LITERAL", u"BLOB_LITERAL", 
                      u"SINGLE_LINE_COMMENT", u"MULTILINE_COMMENT", u"SPACES", 
                      u"UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_compound_select_stmt = 9
    RULE_create_index_stmt = 10
    RULE_create_table_stmt = 11
    RULE_create_trigger_stmt = 12
    RULE_create_view_stmt = 13
    RULE_create_virtual_table_stmt = 14
    RULE_delete_stmt = 15
    RULE_delete_stmt_limited = 16
    RULE_detach_stmt = 17
    RULE_drop_index_stmt = 18
    RULE_drop_table_stmt = 19
    RULE_drop_trigger_stmt = 20
    RULE_drop_view_stmt = 21
    RULE_factored_select_stmt = 22
    RULE_insert_stmt = 23
    RULE_pragma_stmt = 24
    RULE_reindex_stmt = 25
    RULE_release_stmt = 26
    RULE_rollback_stmt = 27
    RULE_savepoint_stmt = 28
    RULE_simple_select_stmt = 29
    RULE_select_stmt = 30
    RULE_select_or_values = 31
    RULE_update_stmt = 32
    RULE_update_stmt_limited = 33
    RULE_vacuum_stmt = 34
    RULE_column_def = 35
    RULE_type_name = 36
    RULE_column_constraint = 37
    RULE_conflict_clause = 38
    RULE_expr = 39
    RULE_foreign_key_clause = 40
    RULE_raise_function = 41
    RULE_indexed_column = 42
    RULE_table_constraint = 43
    RULE_with_clause = 44
    RULE_qualified_table_name = 45
    RULE_ordering_term = 46
    RULE_pragma_value = 47
    RULE_common_table_expression = 48
    RULE_result_column = 49
    RULE_table_or_subquery = 50
    RULE_join_clause = 51
    RULE_join_operator = 52
    RULE_join_constraint = 53
    RULE_select_core = 54
    RULE_compound_operator = 55
    RULE_cte_table_name = 56
    RULE_signed_number = 57
    RULE_literal_value = 58
    RULE_unary_operator = 59
    RULE_error_message = 60
    RULE_module_argument = 61
    RULE_column_alias = 62
    RULE_keyword = 63
    RULE_name = 64
    RULE_function_name = 65
    RULE_database_name = 66
    RULE_table_name = 67
    RULE_table_or_index_name = 68
    RULE_new_table_name = 69
    RULE_column_name = 70
    RULE_collation_name = 71
    RULE_foreign_table = 72
    RULE_index_name = 73
    RULE_trigger_name = 74
    RULE_view_name = 75
    RULE_module_name = 76
    RULE_pragma_name = 77
    RULE_savepoint_name = 78
    RULE_table_alias = 79
    RULE_transaction_name = 80
    RULE_any_name = 81

    ruleNames =  [ u"parse", u"error", u"sql_stmt_list", u"sql_stmt", u"alter_table_stmt", 
                   u"analyze_stmt", u"attach_stmt", u"begin_stmt", u"commit_stmt", 
                   u"compound_select_stmt", u"create_index_stmt", u"create_table_stmt", 
                   u"create_trigger_stmt", u"create_view_stmt", u"create_virtual_table_stmt", 
                   u"delete_stmt", u"delete_stmt_limited", u"detach_stmt", 
                   u"drop_index_stmt", u"drop_table_stmt", u"drop_trigger_stmt", 
                   u"drop_view_stmt", u"factored_select_stmt", u"insert_stmt", 
                   u"pragma_stmt", u"reindex_stmt", u"release_stmt", u"rollback_stmt", 
                   u"savepoint_stmt", u"simple_select_stmt", u"select_stmt", 
                   u"select_or_values", u"update_stmt", u"update_stmt_limited", 
                   u"vacuum_stmt", u"column_def", u"type_name", u"column_constraint", 
                   u"conflict_clause", u"expr", u"foreign_key_clause", u"raise_function", 
                   u"indexed_column", u"table_constraint", u"with_clause", 
                   u"qualified_table_name", u"ordering_term", u"pragma_value", 
                   u"common_table_expression", u"result_column", u"table_or_subquery", 
                   u"join_clause", u"join_operator", u"join_constraint", 
                   u"select_core", u"compound_operator", u"cte_table_name", 
                   u"signed_number", u"literal_value", u"unary_operator", 
                   u"error_message", u"module_argument", u"column_alias", 
                   u"keyword", u"name", u"function_name", u"database_name", 
                   u"table_name", u"table_or_index_name", u"new_table_name", 
                   u"column_name", u"collation_name", u"foreign_table", 
                   u"index_name", u"trigger_name", u"view_name", u"module_name", 
                   u"pragma_name", u"savepoint_name", u"table_alias", u"transaction_name", 
                   u"any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input):
        super(SQLiteParser, self).__init__(input)
        self.checkVersion("4.5.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ParseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def error(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.K_ALTER) | (1 << SQLiteParser.K_ANALYZE) | (1 << SQLiteParser.K_ATTACH) | (1 << SQLiteParser.K_BEGIN) | (1 << SQLiteParser.K_COMMIT) | (1 << SQLiteParser.K_CREATE) | (1 << SQLiteParser.K_DELETE) | (1 << SQLiteParser.K_DETACH) | (1 << SQLiteParser.K_DROP))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLiteParser.K_END - 66)) | (1 << (SQLiteParser.K_EXPLAIN - 66)) | (1 << (SQLiteParser.K_INSERT - 66)) | (1 << (SQLiteParser.K_PRAGMA - 66)) | (1 << (SQLiteParser.K_REINDEX - 66)) | (1 << (SQLiteParser.K_RELEASE - 66)) | (1 << (SQLiteParser.K_REPLACE - 66)) | (1 << (SQLiteParser.K_ROLLBACK - 66)) | (1 << (SQLiteParser.K_SAVEPOINT - 66)) | (1 << (SQLiteParser.K_SELECT - 66)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (SQLiteParser.K_UPDATE - 139)) | (1 << (SQLiteParser.K_VACUUM - 139)) | (1 << (SQLiteParser.K_VALUES - 139)) | (1 << (SQLiteParser.K_WITH - 139)) | (1 << (SQLiteParser.UNEXPECTED_CHAR - 139)))) != 0):
                self.state = 166
                token = self._input.LA(1)
                if token in [SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH]:
                    self.state = 164
                    self.sql_stmt_list()

                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 165
                    self.error()

                else:
                    raise NoViableAltException(self)

                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ErrorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener):
            if hasattr(listener, "enterError"):
                listener.enterError(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError"):
                listener.exitError(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(SQLiteParser.UNEXPECTED_CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 175
                self.match(SQLiteParser.SCOL)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 181
            self.sql_stmt()
            self.state = 190
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 183 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 182
                        self.match(SQLiteParser.SCOL)
                        self.state = 185 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 187
                    self.sql_stmt() 
                self.state = 192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 193
                    self.match(SQLiteParser.SCOL) 
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Sql_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def compound_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Compound_select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_index_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_table_stmtContext,0)


        def drop_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_trigger_stmtContext,0)


        def drop_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_view_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Factored_select_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_EXPLAIN:
                self.state = 199
                self.match(SQLiteParser.K_EXPLAIN)
                self.state = 202
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_QUERY:
                    self.state = 200
                    self.match(SQLiteParser.K_QUERY)
                    self.state = 201
                    self.match(SQLiteParser.K_PLAN)




            self.state = 236
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 206
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 207
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 208
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 209
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 210
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 211
                self.compound_select_stmt()
                pass

            elif la_ == 7:
                self.state = 212
                self.create_index_stmt()
                pass

            elif la_ == 8:
                self.state = 213
                self.create_table_stmt()
                pass

            elif la_ == 9:
                self.state = 214
                self.create_trigger_stmt()
                pass

            elif la_ == 10:
                self.state = 215
                self.create_view_stmt()
                pass

            elif la_ == 11:
                self.state = 216
                self.create_virtual_table_stmt()
                pass

            elif la_ == 12:
                self.state = 217
                self.delete_stmt()
                pass

            elif la_ == 13:
                self.state = 218
                self.delete_stmt_limited()
                pass

            elif la_ == 14:
                self.state = 219
                self.detach_stmt()
                pass

            elif la_ == 15:
                self.state = 220
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 221
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 222
                self.drop_trigger_stmt()
                pass

            elif la_ == 18:
                self.state = 223
                self.drop_view_stmt()
                pass

            elif la_ == 19:
                self.state = 224
                self.factored_select_stmt()
                pass

            elif la_ == 20:
                self.state = 225
                self.insert_stmt()
                pass

            elif la_ == 21:
                self.state = 226
                self.pragma_stmt()
                pass

            elif la_ == 22:
                self.state = 227
                self.reindex_stmt()
                pass

            elif la_ == 23:
                self.state = 228
                self.release_stmt()
                pass

            elif la_ == 24:
                self.state = 229
                self.rollback_stmt()
                pass

            elif la_ == 25:
                self.state = 230
                self.savepoint_stmt()
                pass

            elif la_ == 26:
                self.state = 231
                self.simple_select_stmt()
                pass

            elif la_ == 27:
                self.state = 232
                self.select_stmt()
                pass

            elif la_ == 28:
                self.state = 233
                self.update_stmt()
                pass

            elif la_ == 29:
                self.state = 234
                self.update_stmt_limited()
                pass

            elif la_ == 30:
                self.state = 235
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Alter_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAlter_table_stmt"):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlter_table_stmt"):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(SQLiteParser.K_ALTER)
            self.state = 239
            self.match(SQLiteParser.K_TABLE)
            self.state = 243
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 240
                self.database_name()
                self.state = 241
                self.match(SQLiteParser.DOT)


            self.state = 245
            self.table_name()
            self.state = 254
            token = self._input.LA(1)
            if token in [SQLiteParser.K_RENAME]:
                self.state = 246
                self.match(SQLiteParser.K_RENAME)
                self.state = 247
                self.match(SQLiteParser.K_TO)
                self.state = 248
                self.new_table_name()

            elif token in [SQLiteParser.K_ADD]:
                self.state = 249
                self.match(SQLiteParser.K_ADD)
                self.state = 251
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 250
                    self.match(SQLiteParser.K_COLUMN)


                self.state = 253
                self.column_def()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Analyze_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAnalyze_stmt"):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnalyze_stmt"):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(SQLiteParser.K_ANALYZE)
            self.state = 263
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 257
                self.database_name()

            elif la_ == 2:
                self.state = 258
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 259
                self.database_name()
                self.state = 260
                self.match(SQLiteParser.DOT)
                self.state = 261
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Attach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterAttach_stmt"):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttach_stmt"):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(SQLiteParser.K_ATTACH)
            self.state = 267
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 266
                self.match(SQLiteParser.K_DATABASE)


            self.state = 269
            self.expr(0)
            self.state = 270
            self.match(SQLiteParser.K_AS)
            self.state = 271
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Begin_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterBegin_stmt"):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBegin_stmt"):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(SQLiteParser.K_BEGIN)
            self.state = 275
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0):
                self.state = 274
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 281
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 277
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 279
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 278
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Commit_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCommit_stmt"):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommit_stmt"):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.K_COMMIT or _la==SQLiteParser.K_END):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 288
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 284
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 286
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_UNION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UNION)
            else:
                return self.getToken(SQLiteParser.K_UNION, i)

        def K_INTERSECT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_INTERSECT)
            else:
                return self.getToken(SQLiteParser.K_INTERSECT, i)

        def K_EXCEPT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_EXCEPT)
            else:
                return self.getToken(SQLiteParser.K_EXCEPT, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ALL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ALL)
            else:
                return self.getToken(SQLiteParser.K_ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_select_stmt"):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_select_stmt"):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 290
                self.match(SQLiteParser.K_WITH)
                self.state = 292
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 291
                    self.match(SQLiteParser.K_RECURSIVE)


                self.state = 294
                self.common_table_expression()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 295
                    self.match(SQLiteParser.COMMA)
                    self.state = 296
                    self.common_table_expression()
                    self.state = 301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 304
            self.select_core()
            self.state = 314 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 311
                token = self._input.LA(1)
                if token in [SQLiteParser.K_UNION]:
                    self.state = 305
                    self.match(SQLiteParser.K_UNION)
                    self.state = 307
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_ALL:
                        self.state = 306
                        self.match(SQLiteParser.K_ALL)



                elif token in [SQLiteParser.K_INTERSECT]:
                    self.state = 309
                    self.match(SQLiteParser.K_INTERSECT)

                elif token in [SQLiteParser.K_EXCEPT]:
                    self.state = 310
                    self.match(SQLiteParser.K_EXCEPT)

                else:
                    raise NoViableAltException(self)

                self.state = 313
                self.select_core()
                self.state = 316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION):
                    break

            self.state = 328
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 318
                self.match(SQLiteParser.K_ORDER)
                self.state = 319
                self.match(SQLiteParser.K_BY)
                self.state = 320
                self.ordering_term()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 321
                    self.match(SQLiteParser.COMMA)
                    self.state = 322
                    self.ordering_term()
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 336
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 330
                self.match(SQLiteParser.K_LIMIT)
                self.state = 331
                self.expr(0)
                self.state = 334
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 332
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 333
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_index_stmt"):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_index_stmt"):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(SQLiteParser.K_CREATE)
            self.state = 340
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_UNIQUE:
                self.state = 339
                self.match(SQLiteParser.K_UNIQUE)


            self.state = 342
            self.match(SQLiteParser.K_INDEX)
            self.state = 346
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 343
                self.match(SQLiteParser.K_IF)
                self.state = 344
                self.match(SQLiteParser.K_NOT)
                self.state = 345
                self.match(SQLiteParser.K_EXISTS)


            self.state = 351
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 348
                self.database_name()
                self.state = 349
                self.match(SQLiteParser.DOT)


            self.state = 353
            self.index_name()
            self.state = 354
            self.match(SQLiteParser.K_ON)
            self.state = 355
            self.table_name()
            self.state = 356
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 357
            self.indexed_column()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 358
                self.match(SQLiteParser.COMMA)
                self.state = 359
                self.indexed_column()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 368
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 366
                self.match(SQLiteParser.K_WHERE)
                self.state = 367
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def column_def(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def table_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_table_stmt"):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_table_stmt"):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(SQLiteParser.K_CREATE)
            self.state = 372
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 371
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 374
            self.match(SQLiteParser.K_TABLE)
            self.state = 378
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 375
                self.match(SQLiteParser.K_IF)
                self.state = 376
                self.match(SQLiteParser.K_NOT)
                self.state = 377
                self.match(SQLiteParser.K_EXISTS)


            self.state = 383
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 380
                self.database_name()
                self.state = 381
                self.match(SQLiteParser.DOT)


            self.state = 385
            self.table_name()
            self.state = 409
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 386
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 387
                self.column_def()
                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 388
                        self.match(SQLiteParser.COMMA)
                        self.state = 389
                        self.column_def() 
                    self.state = 394
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 395
                    self.match(SQLiteParser.COMMA)
                    self.state = 396
                    self.table_constraint()
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 402
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 405
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WITHOUT:
                    self.state = 403
                    self.match(SQLiteParser.K_WITHOUT)
                    self.state = 404
                    self.match(SQLiteParser.IDENTIFIER)



            elif token in [SQLiteParser.K_AS]:
                self.state = 407
                self.match(SQLiteParser.K_AS)
                self.state = 408
                self.select_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Database_nameContext,i)


        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_OF(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_OF)
            else:
                return self.getToken(SQLiteParser.K_OF, i)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_trigger_stmt"):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_trigger_stmt"):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(SQLiteParser.K_CREATE)
            self.state = 413
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 412
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 415
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 419
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 416
                self.match(SQLiteParser.K_IF)
                self.state = 417
                self.match(SQLiteParser.K_NOT)
                self.state = 418
                self.match(SQLiteParser.K_EXISTS)


            self.state = 424
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 421
                self.database_name()
                self.state = 422
                self.match(SQLiteParser.DOT)


            self.state = 426
            self.trigger_name()
            self.state = 431
            token = self._input.LA(1)
            if token in [SQLiteParser.K_BEFORE]:
                self.state = 427
                self.match(SQLiteParser.K_BEFORE)
                pass
            elif token in [SQLiteParser.K_AFTER]:
                self.state = 428
                self.match(SQLiteParser.K_AFTER)
                pass
            elif token in [SQLiteParser.K_INSTEAD]:
                self.state = 429
                self.match(SQLiteParser.K_INSTEAD)
                self.state = 430
                self.match(SQLiteParser.K_OF)
                pass
            elif token in [SQLiteParser.K_DELETE, SQLiteParser.K_INSERT, SQLiteParser.K_UPDATE]:
                pass
            else:
                raise NoViableAltException(self)
            self.state = 447
            token = self._input.LA(1)
            if token in [SQLiteParser.K_DELETE]:
                self.state = 433
                self.match(SQLiteParser.K_DELETE)

            elif token in [SQLiteParser.K_INSERT]:
                self.state = 434
                self.match(SQLiteParser.K_INSERT)

            elif token in [SQLiteParser.K_UPDATE]:
                self.state = 435
                self.match(SQLiteParser.K_UPDATE)
                self.state = 445
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_OF:
                    self.state = 436
                    self.match(SQLiteParser.K_OF)
                    self.state = 437
                    self.column_name()
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 438
                        self.match(SQLiteParser.COMMA)
                        self.state = 439
                        self.column_name()
                        self.state = 444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)




            else:
                raise NoViableAltException(self)

            self.state = 449
            self.match(SQLiteParser.K_ON)
            self.state = 453
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 450
                self.database_name()
                self.state = 451
                self.match(SQLiteParser.DOT)


            self.state = 455
            self.table_name()
            self.state = 459
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_FOR:
                self.state = 456
                self.match(SQLiteParser.K_FOR)
                self.state = 457
                self.match(SQLiteParser.K_EACH)
                self.state = 458
                self.match(SQLiteParser.K_ROW)


            self.state = 463
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHEN:
                self.state = 461
                self.match(SQLiteParser.K_WHEN)
                self.state = 462
                self.expr(0)


            self.state = 465
            self.match(SQLiteParser.K_BEGIN)
            self.state = 474 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 470
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 466
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 467
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 468
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 469
                    self.select_stmt()
                    pass


                self.state = 472
                self.match(SQLiteParser.SCOL)
                self.state = 476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.K_DELETE or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.K_INSERT - 88)) | (1 << (SQLiteParser.K_REPLACE - 88)) | (1 << (SQLiteParser.K_SELECT - 88)) | (1 << (SQLiteParser.K_UPDATE - 88)) | (1 << (SQLiteParser.K_VALUES - 88)) | (1 << (SQLiteParser.K_WITH - 88)))) != 0)):
                    break

            self.state = 478
            self.match(SQLiteParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_view_stmt"):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_view_stmt"):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(SQLiteParser.K_CREATE)
            self.state = 482
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY:
                self.state = 481
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_TEMP or _la==SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 484
            self.match(SQLiteParser.K_VIEW)
            self.state = 488
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 485
                self.match(SQLiteParser.K_IF)
                self.state = 486
                self.match(SQLiteParser.K_NOT)
                self.state = 487
                self.match(SQLiteParser.K_EXISTS)


            self.state = 493
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 490
                self.database_name()
                self.state = 491
                self.match(SQLiteParser.DOT)


            self.state = 495
            self.view_name()
            self.state = 496
            self.match(SQLiteParser.K_AS)
            self.state = 497
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_virtual_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Create_virtual_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def module_argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterCreate_virtual_table_stmt"):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreate_virtual_table_stmt"):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(SQLiteParser.K_CREATE)
            self.state = 500
            self.match(SQLiteParser.K_VIRTUAL)
            self.state = 501
            self.match(SQLiteParser.K_TABLE)
            self.state = 505
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 502
                self.match(SQLiteParser.K_IF)
                self.state = 503
                self.match(SQLiteParser.K_NOT)
                self.state = 504
                self.match(SQLiteParser.K_EXISTS)


            self.state = 510
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 507
                self.database_name()
                self.state = 508
                self.match(SQLiteParser.DOT)


            self.state = 512
            self.table_name()
            self.state = 513
            self.match(SQLiteParser.K_USING)
            self.state = 514
            self.module_name()
            self.state = 526
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 515
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 516
                self.module_argument()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 517
                    self.match(SQLiteParser.COMMA)
                    self.state = 518
                    self.module_argument()
                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 524
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt"):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt"):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 528
                self.with_clause()


            self.state = 531
            self.match(SQLiteParser.K_DELETE)
            self.state = 532
            self.match(SQLiteParser.K_FROM)
            self.state = 533
            self.qualified_table_name()
            self.state = 536
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 534
                self.match(SQLiteParser.K_WHERE)
                self.state = 535
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Delete_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterDelete_stmt_limited"):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDelete_stmt_limited"):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 538
                self.with_clause()


            self.state = 541
            self.match(SQLiteParser.K_DELETE)
            self.state = 542
            self.match(SQLiteParser.K_FROM)
            self.state = 543
            self.qualified_table_name()
            self.state = 546
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 544
                self.match(SQLiteParser.K_WHERE)
                self.state = 545
                self.expr(0)


            self.state = 566
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT or _la==SQLiteParser.K_ORDER:
                self.state = 558
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ORDER:
                    self.state = 548
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 549
                    self.match(SQLiteParser.K_BY)
                    self.state = 550
                    self.ordering_term()
                    self.state = 555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 551
                        self.match(SQLiteParser.COMMA)
                        self.state = 552
                        self.ordering_term()
                        self.state = 557
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 560
                self.match(SQLiteParser.K_LIMIT)
                self.state = 561
                self.expr(0)
                self.state = 564
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 562
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 563
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Detach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Detach_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDetach_stmt"):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDetach_stmt"):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(SQLiteParser.K_DETACH)
            self.state = 570
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 569
                self.match(SQLiteParser.K_DATABASE)


            self.state = 572
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_index_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_index_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_index_stmt"):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_index_stmt"):
                listener.exitDrop_index_stmt(self)




    def drop_index_stmt(self):

        localctx = SQLiteParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(SQLiteParser.K_DROP)
            self.state = 575
            self.match(SQLiteParser.K_INDEX)
            self.state = 578
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 576
                self.match(SQLiteParser.K_IF)
                self.state = 577
                self.match(SQLiteParser.K_EXISTS)


            self.state = 583
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 580
                self.database_name()
                self.state = 581
                self.match(SQLiteParser.DOT)


            self.state = 585
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_table_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_table_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_table_stmt"):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_table_stmt"):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = SQLiteParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(SQLiteParser.K_DROP)
            self.state = 588
            self.match(SQLiteParser.K_TABLE)
            self.state = 591
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 589
                self.match(SQLiteParser.K_IF)
                self.state = 590
                self.match(SQLiteParser.K_EXISTS)


            self.state = 596
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 593
                self.database_name()
                self.state = 594
                self.match(SQLiteParser.DOT)


            self.state = 598
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_trigger_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_trigger_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_trigger_stmt"):
                listener.enterDrop_trigger_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_trigger_stmt"):
                listener.exitDrop_trigger_stmt(self)




    def drop_trigger_stmt(self):

        localctx = SQLiteParser.Drop_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_trigger_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(SQLiteParser.K_DROP)
            self.state = 601
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 604
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 602
                self.match(SQLiteParser.K_IF)
                self.state = 603
                self.match(SQLiteParser.K_EXISTS)


            self.state = 609
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 606
                self.database_name()
                self.state = 607
                self.match(SQLiteParser.DOT)


            self.state = 611
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Drop_view_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_view_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDrop_view_stmt"):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDrop_view_stmt"):
                listener.exitDrop_view_stmt(self)




    def drop_view_stmt(self):

        localctx = SQLiteParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(SQLiteParser.K_DROP)
            self.state = 614
            self.match(SQLiteParser.K_VIEW)
            self.state = 617
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 615
                self.match(SQLiteParser.K_IF)
                self.state = 616
                self.match(SQLiteParser.K_EXISTS)


            self.state = 622
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 619
                self.database_name()
                self.state = 620
                self.match(SQLiteParser.DOT)


            self.state = 624
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Factored_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterFactored_select_stmt"):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactored_select_stmt"):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 626
                self.match(SQLiteParser.K_WITH)
                self.state = 628
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.match(SQLiteParser.K_RECURSIVE)


                self.state = 630
                self.common_table_expression()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 631
                    self.match(SQLiteParser.COMMA)
                    self.state = 632
                    self.common_table_expression()
                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 640
            self.select_core()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION:
                self.state = 641
                self.compound_operator()
                self.state = 642
                self.select_core()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 649
                self.match(SQLiteParser.K_ORDER)
                self.state = 650
                self.match(SQLiteParser.K_BY)
                self.state = 651
                self.ordering_term()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 652
                    self.match(SQLiteParser.COMMA)
                    self.state = 653
                    self.ordering_term()
                    self.state = 658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 667
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 661
                self.match(SQLiteParser.K_LIMIT)
                self.state = 662
                self.expr(0)
                self.state = 665
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 663
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 664
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Insert_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterInsert_stmt"):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInsert_stmt"):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 669
                self.with_clause()


            self.state = 689
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 672
                self.match(SQLiteParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 673
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 674
                self.match(SQLiteParser.K_INSERT)
                self.state = 675
                self.match(SQLiteParser.K_OR)
                self.state = 676
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 677
                self.match(SQLiteParser.K_INSERT)
                self.state = 678
                self.match(SQLiteParser.K_OR)
                self.state = 679
                self.match(SQLiteParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 680
                self.match(SQLiteParser.K_INSERT)
                self.state = 681
                self.match(SQLiteParser.K_OR)
                self.state = 682
                self.match(SQLiteParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 683
                self.match(SQLiteParser.K_INSERT)
                self.state = 684
                self.match(SQLiteParser.K_OR)
                self.state = 685
                self.match(SQLiteParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 686
                self.match(SQLiteParser.K_INSERT)
                self.state = 687
                self.match(SQLiteParser.K_OR)
                self.state = 688
                self.match(SQLiteParser.K_IGNORE)
                pass


            self.state = 691
            self.match(SQLiteParser.K_INTO)
            self.state = 695
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 692
                self.database_name()
                self.state = 693
                self.match(SQLiteParser.DOT)


            self.state = 697
            self.table_name()
            self.state = 709
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 698
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 699
                self.column_name()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 700
                    self.match(SQLiteParser.COMMA)
                    self.state = 701
                    self.column_name()
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 742
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 711
                self.match(SQLiteParser.K_VALUES)
                self.state = 712
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 713
                self.expr(0)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 714
                    self.match(SQLiteParser.COMMA)
                    self.state = 715
                    self.expr(0)
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 721
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 722
                    self.match(SQLiteParser.COMMA)
                    self.state = 723
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 724
                    self.expr(0)
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 725
                        self.match(SQLiteParser.COMMA)
                        self.state = 726
                        self.expr(0)
                        self.state = 731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 732
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 739
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 740
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 741
                self.match(SQLiteParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_stmt"):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_stmt"):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(SQLiteParser.K_PRAGMA)
            self.state = 748
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 745
                self.database_name()
                self.state = 746
                self.match(SQLiteParser.DOT)


            self.state = 750
            self.pragma_name()
            self.state = 757
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 751
                self.match(SQLiteParser.ASSIGN)
                self.state = 752
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 753
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 754
                self.pragma_value()
                self.state = 755
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Reindex_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterReindex_stmt"):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReindex_stmt"):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(SQLiteParser.K_REINDEX)
            self.state = 770
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 760
                self.collation_name()

            elif la_ == 2:
                self.state = 764
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 761
                    self.database_name()
                    self.state = 762
                    self.match(SQLiteParser.DOT)


                self.state = 768
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 766
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 767
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Release_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Release_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRelease_stmt"):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelease_stmt"):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(SQLiteParser.K_RELEASE)
            self.state = 774
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 773
                self.match(SQLiteParser.K_SAVEPOINT)


            self.state = 776
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Rollback_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRollback_stmt"):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRollback_stmt"):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(SQLiteParser.K_ROLLBACK)
            self.state = 783
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TRANSACTION:
                self.state = 779
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 781
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.transaction_name()




            self.state = 790
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_TO:
                self.state = 785
                self.match(SQLiteParser.K_TO)
                self.state = 787
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 786
                    self.match(SQLiteParser.K_SAVEPOINT)


                self.state = 789
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_stmt"):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_stmt"):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(SQLiteParser.K_SAVEPOINT)
            self.state = 793
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Simple_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 795
                self.match(SQLiteParser.K_WITH)
                self.state = 797
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 796
                    self.match(SQLiteParser.K_RECURSIVE)


                self.state = 799
                self.common_table_expression()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 800
                    self.match(SQLiteParser.COMMA)
                    self.state = 801
                    self.common_table_expression()
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 809
            self.select_core()
            self.state = 820
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 810
                self.match(SQLiteParser.K_ORDER)
                self.state = 811
                self.match(SQLiteParser.K_BY)
                self.state = 812
                self.ordering_term()
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 813
                    self.match(SQLiteParser.COMMA)
                    self.state = 814
                    self.ordering_term()
                    self.state = 819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 828
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 822
                self.match(SQLiteParser.K_LIMIT)
                self.state = 823
                self.expr(0)
                self.state = 826
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 824
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 825
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_or_valuesContext,i)


        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 830
                self.match(SQLiteParser.K_WITH)
                self.state = 832
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 831
                    self.match(SQLiteParser.K_RECURSIVE)


                self.state = 834
                self.common_table_expression()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 835
                    self.match(SQLiteParser.COMMA)
                    self.state = 836
                    self.common_table_expression()
                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 844
            self.select_or_values()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_EXCEPT or _la==SQLiteParser.K_INTERSECT or _la==SQLiteParser.K_UNION:
                self.state = 845
                self.compound_operator()
                self.state = 846
                self.select_or_values()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 863
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ORDER:
                self.state = 853
                self.match(SQLiteParser.K_ORDER)
                self.state = 854
                self.match(SQLiteParser.K_BY)
                self.state = 855
                self.ordering_term()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 856
                    self.match(SQLiteParser.COMMA)
                    self.state = 857
                    self.ordering_term()
                    self.state = 862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 871
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT:
                self.state = 865
                self.match(SQLiteParser.K_LIMIT)
                self.state = 866
                self.expr(0)
                self.state = 869
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 867
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 868
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_or_valuesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_or_values

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_or_values"):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_or_values"):
                listener.exitSelect_or_values(self)




    def select_or_values(self):

        localctx = SQLiteParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 947
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(SQLiteParser.K_SELECT)
                self.state = 875
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 874
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ALL or _la==SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 877
                self.result_column()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 878
                    self.match(SQLiteParser.COMMA)
                    self.state = 879
                    self.result_column()
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 897
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_FROM:
                    self.state = 885
                    self.match(SQLiteParser.K_FROM)
                    self.state = 895
                    la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                    if la_ == 1:
                        self.state = 886
                        self.table_or_subquery()
                        self.state = 891
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 887
                            self.match(SQLiteParser.COMMA)
                            self.state = 888
                            self.table_or_subquery()
                            self.state = 893
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 894
                        self.join_clause()
                        pass




                self.state = 901
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WHERE:
                    self.state = 899
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 900
                    self.expr(0)


                self.state = 917
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_GROUP:
                    self.state = 903
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 904
                    self.match(SQLiteParser.K_BY)
                    self.state = 905
                    self.expr(0)
                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 906
                        self.match(SQLiteParser.COMMA)
                        self.state = 907
                        self.expr(0)
                        self.state = 912
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 915
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_HAVING:
                        self.state = 913
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 914
                        self.expr(0)





            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.match(SQLiteParser.K_VALUES)
                self.state = 920
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 921
                self.expr(0)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 922
                    self.match(SQLiteParser.COMMA)
                    self.state = 923
                    self.expr(0)
                    self.state = 928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 929
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 930
                    self.match(SQLiteParser.COMMA)
                    self.state = 931
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 932
                    self.expr(0)
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 933
                        self.match(SQLiteParser.COMMA)
                        self.state = 934
                        self.expr(0)
                        self.state = 939
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 940
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt"):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt"):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 949
                self.with_clause()


            self.state = 952
            self.match(SQLiteParser.K_UPDATE)
            self.state = 963
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 953
                self.match(SQLiteParser.K_OR)
                self.state = 954
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 955
                self.match(SQLiteParser.K_OR)
                self.state = 956
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 957
                self.match(SQLiteParser.K_OR)
                self.state = 958
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 959
                self.match(SQLiteParser.K_OR)
                self.state = 960
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 961
                self.match(SQLiteParser.K_OR)
                self.state = 962
                self.match(SQLiteParser.K_IGNORE)


            self.state = 965
            self.qualified_table_name()
            self.state = 966
            self.match(SQLiteParser.K_SET)
            self.state = 967
            self.column_name()
            self.state = 968
            self.match(SQLiteParser.ASSIGN)
            self.state = 969
            self.expr(0)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 970
                self.match(SQLiteParser.COMMA)
                self.state = 971
                self.column_name()
                self.state = 972
                self.match(SQLiteParser.ASSIGN)
                self.state = 973
                self.expr(0)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 982
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 980
                self.match(SQLiteParser.K_WHERE)
                self.state = 981
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Update_stmt_limitedContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdate_stmt_limited"):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdate_stmt_limited"):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WITH:
                self.state = 984
                self.with_clause()


            self.state = 987
            self.match(SQLiteParser.K_UPDATE)
            self.state = 998
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 988
                self.match(SQLiteParser.K_OR)
                self.state = 989
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 990
                self.match(SQLiteParser.K_OR)
                self.state = 991
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 992
                self.match(SQLiteParser.K_OR)
                self.state = 993
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 994
                self.match(SQLiteParser.K_OR)
                self.state = 995
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 996
                self.match(SQLiteParser.K_OR)
                self.state = 997
                self.match(SQLiteParser.K_IGNORE)


            self.state = 1000
            self.qualified_table_name()
            self.state = 1001
            self.match(SQLiteParser.K_SET)
            self.state = 1002
            self.column_name()
            self.state = 1003
            self.match(SQLiteParser.ASSIGN)
            self.state = 1004
            self.expr(0)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1005
                self.match(SQLiteParser.COMMA)
                self.state = 1006
                self.column_name()
                self.state = 1007
                self.match(SQLiteParser.ASSIGN)
                self.state = 1008
                self.expr(0)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1017
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_WHERE:
                self.state = 1015
                self.match(SQLiteParser.K_WHERE)
                self.state = 1016
                self.expr(0)


            self.state = 1037
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_LIMIT or _la==SQLiteParser.K_ORDER:
                self.state = 1029
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ORDER:
                    self.state = 1019
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 1020
                    self.match(SQLiteParser.K_BY)
                    self.state = 1021
                    self.ordering_term()
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1022
                        self.match(SQLiteParser.COMMA)
                        self.state = 1023
                        self.ordering_term()
                        self.state = 1028
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1031
                self.match(SQLiteParser.K_LIMIT)
                self.state = 1032
                self.expr(0)
                self.state = 1035
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET:
                    self.state = 1033
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1034
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Vacuum_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterVacuum_stmt"):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVacuum_stmt"):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(SQLiteParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_def"):
                listener.enterColumn_def(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_def"):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.column_name()
            self.state = 1043
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1042
                self.type_name()


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.K_CHECK) | (1 << SQLiteParser.K_COLLATE) | (1 << SQLiteParser.K_CONSTRAINT) | (1 << SQLiteParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (SQLiteParser.K_NOT - 102)) | (1 << (SQLiteParser.K_NULL - 102)) | (1 << (SQLiteParser.K_PRIMARY - 102)) | (1 << (SQLiteParser.K_REFERENCES - 102)) | (1 << (SQLiteParser.K_UNIQUE - 102)))) != 0):
                self.state = 1045
                self.column_constraint()
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Type_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def signed_number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1051
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 1054 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1066
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1057
                self.signed_number()
                self.state = 1058
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 1060
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1061
                self.signed_number()
                self.state = 1062
                self.match(SQLiteParser.COMMA)
                self.state = 1063
                self.signed_number()
                self.state = 1064
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_constraint"):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_constraint"):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_CONSTRAINT:
                self.state = 1068
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1069
                self.name()


            self.state = 1105
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY]:
                self.state = 1072
                self.match(SQLiteParser.K_PRIMARY)
                self.state = 1073
                self.match(SQLiteParser.K_KEY)
                self.state = 1075
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                    self.state = 1074
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 1077
                self.conflict_clause()
                self.state = 1079
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_AUTOINCREMENT:
                    self.state = 1078
                    self.match(SQLiteParser.K_AUTOINCREMENT)



            elif token in [SQLiteParser.K_NOT, SQLiteParser.K_NULL]:
                self.state = 1082
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NOT:
                    self.state = 1081
                    self.match(SQLiteParser.K_NOT)


                self.state = 1084
                self.match(SQLiteParser.K_NULL)
                self.state = 1085
                self.conflict_clause()

            elif token in [SQLiteParser.K_UNIQUE]:
                self.state = 1086
                self.match(SQLiteParser.K_UNIQUE)
                self.state = 1087
                self.conflict_clause()

            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1088
                self.match(SQLiteParser.K_CHECK)
                self.state = 1089
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1090
                self.expr(0)
                self.state = 1091
                self.match(SQLiteParser.CLOSE_PAR)

            elif token in [SQLiteParser.K_DEFAULT]:
                self.state = 1093
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 1100
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1094
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 1095
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 1096
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1097
                    self.expr(0)
                    self.state = 1098
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass



            elif token in [SQLiteParser.K_COLLATE]:
                self.state = 1102
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1103
                self.collation_name()

            elif token in [SQLiteParser.K_REFERENCES]:
                self.state = 1104
                self.foreign_key_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Conflict_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterConflict_clause"):
                listener.enterConflict_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConflict_clause"):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ON:
                self.state = 1107
                self.match(SQLiteParser.K_ON)
                self.state = 1108
                self.match(SQLiteParser.K_CONFLICT)
                self.state = 1109
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.K_FAIL - 72)) | (1 << (SQLiteParser.K_IGNORE - 72)) | (1 << (SQLiteParser.K_REPLACE - 72)) | (1 << (SQLiteParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_WHEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHEN)
            else:
                return self.getToken(SQLiteParser.K_WHEN, i)

        def K_THEN(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_THEN)
            else:
                return self.getToken(SQLiteParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1113
                self.unary_operator()
                self.state = 1114
                self.expr(21)
                pass

            elif la_ == 2:
                self.state = 1116
                self.literal_value()
                pass

            elif la_ == 3:
                self.state = 1117
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 4:
                self.state = 1126
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1121
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1118
                        self.database_name()
                        self.state = 1119
                        self.match(SQLiteParser.DOT)


                    self.state = 1123
                    self.table_name()
                    self.state = 1124
                    self.match(SQLiteParser.DOT)


                self.state = 1128
                self.column_name()
                pass

            elif la_ == 5:
                self.state = 1129
                self.function_name()
                self.state = 1130
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1143
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER, SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND, SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT, SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY, SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK, SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT, SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME, SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT, SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE, SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP, SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS, SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN, SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP, SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE, SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD, SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL, SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE, SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO, SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF, SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER, SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY, SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE, SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE, SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE, SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO, SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION, SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 1132
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1131
                        self.match(SQLiteParser.K_DISTINCT)


                    self.state = 1134
                    self.expr(0)
                    self.state = 1139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1135
                        self.match(SQLiteParser.COMMA)
                        self.state = 1136
                        self.expr(0)
                        self.state = 1141
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 1142
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 1145
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 1147
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1148
                self.expr(0)
                self.state = 1149
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 1151
                self.match(SQLiteParser.K_CAST)
                self.state = 1152
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1153
                self.expr(0)
                self.state = 1154
                self.match(SQLiteParser.K_AS)
                self.state = 1155
                self.type_name()
                self.state = 1156
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 1162
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_EXISTS or _la==SQLiteParser.K_NOT:
                    self.state = 1159
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_NOT:
                        self.state = 1158
                        self.match(SQLiteParser.K_NOT)


                    self.state = 1161
                    self.match(SQLiteParser.K_EXISTS)


                self.state = 1164
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1165
                self.select_stmt()
                self.state = 1166
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 1168
                self.match(SQLiteParser.K_CASE)
                self.state = 1170
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1169
                    self.expr(0)


                self.state = 1177 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1172
                    self.match(SQLiteParser.K_WHEN)
                    self.state = 1173
                    self.expr(0)
                    self.state = 1174
                    self.match(SQLiteParser.K_THEN)
                    self.state = 1175
                    self.expr(0)
                    self.state = 1179 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.K_WHEN):
                        break

                self.state = 1183
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_ELSE:
                    self.state = 1181
                    self.match(SQLiteParser.K_ELSE)
                    self.state = 1182
                    self.expr(0)


                self.state = 1185
                self.match(SQLiteParser.K_END)
                pass

            elif la_ == 10:
                self.state = 1187
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1288
                    la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1190
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1191
                        self.match(SQLiteParser.PIPE2)
                        self.state = 1192
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1193
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1194
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1195
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1196
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1197
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1198
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1199
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1200
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1201
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1202
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1203
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1204
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1205
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1218
                        la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                        if la_ == 1:
                            self.state = 1206
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1207
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1208
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1209
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1210
                            self.match(SQLiteParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 1211
                            self.match(SQLiteParser.K_IS)
                            self.state = 1212
                            self.match(SQLiteParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1213
                            self.match(SQLiteParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 1214
                            self.match(SQLiteParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1215
                            self.match(SQLiteParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1216
                            self.match(SQLiteParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1217
                            self.match(SQLiteParser.K_REGEXP)
                            pass


                        self.state = 1220
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1221
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1222
                        self.match(SQLiteParser.K_AND)
                        self.state = 1223
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1224
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1225
                        self.match(SQLiteParser.K_OR)
                        self.state = 1226
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1227
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1228
                        self.match(SQLiteParser.K_IS)
                        self.state = 1230
                        la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                        if la_ == 1:
                            self.state = 1229
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1232
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1233
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1235
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1234
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1237
                        self.match(SQLiteParser.K_BETWEEN)
                        self.state = 1238
                        self.expr(0)
                        self.state = 1239
                        self.match(SQLiteParser.K_AND)
                        self.state = 1240
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1242
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1243
                        self.match(SQLiteParser.K_COLLATE)
                        self.state = 1244
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1245
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1247
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1246
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1249
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SQLiteParser.K_GLOB - 77)) | (1 << (SQLiteParser.K_LIKE - 77)) | (1 << (SQLiteParser.K_MATCH - 77)) | (1 << (SQLiteParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1250
                        self.expr(0)
                        self.state = 1253
                        la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                        if la_ == 1:
                            self.state = 1251
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 1252
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1255
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1260
                        token = self._input.LA(1)
                        if token in [SQLiteParser.K_ISNULL]:
                            self.state = 1256
                            self.match(SQLiteParser.K_ISNULL)

                        elif token in [SQLiteParser.K_NOTNULL]:
                            self.state = 1257
                            self.match(SQLiteParser.K_NOTNULL)

                        elif token in [SQLiteParser.K_NOT]:
                            self.state = 1258
                            self.match(SQLiteParser.K_NOT)
                            self.state = 1259
                            self.match(SQLiteParser.K_NULL)

                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1262
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1264
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.K_NOT:
                            self.state = 1263
                            self.match(SQLiteParser.K_NOT)


                        self.state = 1266
                        self.match(SQLiteParser.K_IN)
                        self.state = 1286
                        la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                        if la_ == 1:
                            self.state = 1267
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1277
                            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                            if la_ == 1:
                                self.state = 1268
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1269
                                self.expr(0)
                                self.state = 1274
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1270
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1271
                                    self.expr(0)
                                    self.state = 1276
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1279
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1283
                            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                            if la_ == 1:
                                self.state = 1280
                                self.database_name()
                                self.state = 1281
                                self.match(SQLiteParser.DOT)


                            self.state = 1285
                            self.table_name()
                            pass


                        pass

             
                self.state = 1292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_key_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_ON(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ON)
            else:
                return self.getToken(SQLiteParser.K_ON, i)

        def K_MATCH(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_MATCH)
            else:
                return self.getToken(SQLiteParser.K_MATCH, i)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def K_DELETE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DELETE)
            else:
                return self.getToken(SQLiteParser.K_DELETE, i)

        def K_UPDATE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UPDATE)
            else:
                return self.getToken(SQLiteParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_SET(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_SET)
            else:
                return self.getToken(SQLiteParser.K_SET, i)

        def K_NULL(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NULL)
            else:
                return self.getToken(SQLiteParser.K_NULL, i)

        def K_DEFAULT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DEFAULT)
            else:
                return self.getToken(SQLiteParser.K_DEFAULT, i)

        def K_CASCADE(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_CASCADE)
            else:
                return self.getToken(SQLiteParser.K_CASCADE, i)

        def K_RESTRICT(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_RESTRICT)
            else:
                return self.getToken(SQLiteParser.K_RESTRICT, i)

        def K_NO(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NO)
            else:
                return self.getToken(SQLiteParser.K_NO, i)

        def K_ACTION(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ACTION)
            else:
                return self.getToken(SQLiteParser.K_ACTION, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_key_clause"):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_key_clause"):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(SQLiteParser.K_REFERENCES)
            self.state = 1294
            self.foreign_table()
            self.state = 1306
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1295
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1296
                self.column_name()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1297
                    self.match(SQLiteParser.COMMA)
                    self.state = 1298
                    self.column_name()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1304
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.K_MATCH or _la==SQLiteParser.K_ON:
                self.state = 1322
                token = self._input.LA(1)
                if token in [SQLiteParser.K_ON]:
                    self.state = 1308
                    self.match(SQLiteParser.K_ON)
                    self.state = 1309
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_DELETE or _la==SQLiteParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1318
                    la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                    if la_ == 1:
                        self.state = 1310
                        self.match(SQLiteParser.K_SET)
                        self.state = 1311
                        self.match(SQLiteParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 1312
                        self.match(SQLiteParser.K_SET)
                        self.state = 1313
                        self.match(SQLiteParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 1314
                        self.match(SQLiteParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 1315
                        self.match(SQLiteParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 1316
                        self.match(SQLiteParser.K_NO)
                        self.state = 1317
                        self.match(SQLiteParser.K_ACTION)
                        pass



                elif token in [SQLiteParser.K_MATCH]:
                    self.state = 1320
                    self.match(SQLiteParser.K_MATCH)
                    self.state = 1321
                    self.name()

                else:
                    raise NoViableAltException(self)

                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1339
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1330
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NOT:
                    self.state = 1329
                    self.match(SQLiteParser.K_NOT)


                self.state = 1332
                self.match(SQLiteParser.K_DEFERRABLE)
                self.state = 1337
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1333
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1334
                    self.match(SQLiteParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 1335
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1336
                    self.match(SQLiteParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Raise_functionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(SQLiteParser.K_RAISE)
            self.state = 1342
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1347
            token = self._input.LA(1)
            if token in [SQLiteParser.K_IGNORE]:
                self.state = 1343
                self.match(SQLiteParser.K_IGNORE)

            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_FAIL, SQLiteParser.K_ROLLBACK]:
                self.state = 1344
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ABORT or _la==SQLiteParser.K_FAIL or _la==SQLiteParser.K_ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1345
                self.match(SQLiteParser.COMMA)
                self.state = 1346
                self.error_message()

            else:
                raise NoViableAltException(self)

            self.state = 1349
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Indexed_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexed_column"):
                listener.enterIndexed_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexed_column"):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.column_name()
            self.state = 1354
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_COLLATE:
                self.state = 1352
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1353
                self.collation_name()


            self.state = 1357
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                self.state = 1356
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_constraint"):
                listener.enterTable_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_constraint"):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_CONSTRAINT:
                self.state = 1359
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1360
                self.name()


            self.state = 1399
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY, SQLiteParser.K_UNIQUE]:
                self.state = 1366
                token = self._input.LA(1)
                if token in [SQLiteParser.K_PRIMARY]:
                    self.state = 1363
                    self.match(SQLiteParser.K_PRIMARY)
                    self.state = 1364
                    self.match(SQLiteParser.K_KEY)

                elif token in [SQLiteParser.K_UNIQUE]:
                    self.state = 1365
                    self.match(SQLiteParser.K_UNIQUE)

                else:
                    raise NoViableAltException(self)

                self.state = 1368
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1369
                self.indexed_column()
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1370
                    self.match(SQLiteParser.COMMA)
                    self.state = 1371
                    self.indexed_column()
                    self.state = 1376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1377
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1378
                self.conflict_clause()

            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1380
                self.match(SQLiteParser.K_CHECK)
                self.state = 1381
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1382
                self.expr(0)
                self.state = 1383
                self.match(SQLiteParser.CLOSE_PAR)

            elif token in [SQLiteParser.K_FOREIGN]:
                self.state = 1385
                self.match(SQLiteParser.K_FOREIGN)
                self.state = 1386
                self.match(SQLiteParser.K_KEY)
                self.state = 1387
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1388
                self.column_name()
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1389
                    self.match(SQLiteParser.COMMA)
                    self.state = 1390
                    self.column_name()
                    self.state = 1395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1396
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1397
                self.foreign_key_clause()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def cte_table_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def K_AS(self, i=None):
            if i is None:
                return self.getTokens(SQLiteParser.K_AS)
            else:
                return self.getToken(SQLiteParser.K_AS, i)

        def select_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(SQLiteParser.K_WITH)
            self.state = 1403
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1402
                self.match(SQLiteParser.K_RECURSIVE)


            self.state = 1405
            self.cte_table_name()
            self.state = 1406
            self.match(SQLiteParser.K_AS)
            self.state = 1407
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1408
            self.select_stmt()
            self.state = 1409
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1410
                self.match(SQLiteParser.COMMA)
                self.state = 1411
                self.cte_table_name()
                self.state = 1412
                self.match(SQLiteParser.K_AS)
                self.state = 1413
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1414
                self.select_stmt()
                self.state = 1415
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Qualified_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1422
                self.database_name()
                self.state = 1423
                self.match(SQLiteParser.DOT)


            self.state = 1427
            self.table_name()
            self.state = 1433
            token = self._input.LA(1)
            if token in [SQLiteParser.K_INDEXED]:
                self.state = 1428
                self.match(SQLiteParser.K_INDEXED)
                self.state = 1429
                self.match(SQLiteParser.K_BY)
                self.state = 1430
                self.index_name()
                pass
            elif token in [SQLiteParser.K_NOT]:
                self.state = 1431
                self.match(SQLiteParser.K_NOT)
                self.state = 1432
                self.match(SQLiteParser.K_INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_LIMIT, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Ordering_termContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.expr(0)
            self.state = 1438
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_COLLATE:
                self.state = 1436
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1437
                self.collation_name()


            self.state = 1441
            _la = self._input.LA(1)
            if _la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC:
                self.state = 1440
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.K_ASC or _la==SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pragma_value)
        try:
            self.state = 1446
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1443
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1445
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Common_table_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.table_name()
            self.state = 1460
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1449
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1450
                self.column_name()
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1451
                    self.match(SQLiteParser.COMMA)
                    self.state = 1452
                    self.column_name()
                    self.state = 1457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1458
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1462
            self.match(SQLiteParser.K_AS)
            self.state = 1463
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1464
            self.select_stmt()
            self.state = 1465
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Result_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1479
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1467
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self.table_name()
                self.state = 1469
                self.match(SQLiteParser.DOT)
                self.state = 1470
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1472
                self.expr(0)
                self.state = 1477
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1474
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_AS:
                        self.state = 1473
                        self.match(SQLiteParser.K_AS)


                    self.state = 1476
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_subqueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1528
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1484
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1481
                    self.database_name()
                    self.state = 1482
                    self.match(SQLiteParser.DOT)


                self.state = 1486
                self.table_name()
                self.state = 1491
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1488
                    la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                    if la_ == 1:
                        self.state = 1487
                        self.match(SQLiteParser.K_AS)


                    self.state = 1490
                    self.table_alias()


                self.state = 1498
                token = self._input.LA(1)
                if token in [SQLiteParser.K_INDEXED]:
                    self.state = 1493
                    self.match(SQLiteParser.K_INDEXED)
                    self.state = 1494
                    self.match(SQLiteParser.K_BY)
                    self.state = 1495
                    self.index_name()
                    pass
                elif token in [SQLiteParser.K_NOT]:
                    self.state = 1496
                    self.match(SQLiteParser.K_NOT)
                    self.state = 1497
                    self.match(SQLiteParser.K_INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ON, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    raise NoViableAltException(self)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1510
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1501
                    self.table_or_subquery()
                    self.state = 1506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1502
                        self.match(SQLiteParser.COMMA)
                        self.state = 1503
                        self.table_or_subquery()
                        self.state = 1508
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1509
                    self.join_clause()
                    pass


                self.state = 1512
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1517
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1514
                    la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                    if la_ == 1:
                        self.state = 1513
                        self.match(SQLiteParser.K_AS)


                    self.state = 1516
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1519
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1520
                self.select_stmt()
                self.state = 1521
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1526
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1523
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        self.state = 1522
                        self.match(SQLiteParser.K_AS)


                    self.state = 1525
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.table_or_subquery()
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SQLiteParser.K_INNER - 87)) | (1 << (SQLiteParser.K_JOIN - 87)) | (1 << (SQLiteParser.K_LEFT - 87)) | (1 << (SQLiteParser.K_NATURAL - 87)))) != 0):
                self.state = 1531
                self.join_operator()
                self.state = 1532
                self.table_or_subquery()
                self.state = 1533
                self.join_constraint()
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1553
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.match(SQLiteParser.COMMA)

            elif token in [SQLiteParser.K_CROSS, SQLiteParser.K_INNER, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_NATURAL:
                    self.state = 1541
                    self.match(SQLiteParser.K_NATURAL)


                self.state = 1550
                token = self._input.LA(1)
                if token in [SQLiteParser.K_LEFT]:
                    self.state = 1544
                    self.match(SQLiteParser.K_LEFT)
                    self.state = 1546
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_OUTER:
                        self.state = 1545
                        self.match(SQLiteParser.K_OUTER)


                    pass
                elif token in [SQLiteParser.K_INNER]:
                    self.state = 1548
                    self.match(SQLiteParser.K_INNER)
                    pass
                elif token in [SQLiteParser.K_CROSS]:
                    self.state = 1549
                    self.match(SQLiteParser.K_CROSS)
                    pass
                elif token in [SQLiteParser.K_JOIN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 1552
                self.match(SQLiteParser.K_JOIN)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Join_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ON]:
                self.state = 1555
                self.match(SQLiteParser.K_ON)
                self.state = 1556
                self.expr(0)
                pass
            elif token in [SQLiteParser.K_USING]:
                self.state = 1557
                self.match(SQLiteParser.K_USING)
                self.state = 1558
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1559
                self.column_name()
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1560
                    self.match(SQLiteParser.COMMA)
                    self.state = 1561
                    self.column_name()
                    self.state = 1566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1567
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_DROP, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Select_coreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1645
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1571
                self.match(SQLiteParser.K_SELECT)
                self.state = 1573
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1572
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.K_ALL or _la==SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()


                self.state = 1575
                self.result_column()
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1576
                    self.match(SQLiteParser.COMMA)
                    self.state = 1577
                    self.result_column()
                    self.state = 1582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1595
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_FROM:
                    self.state = 1583
                    self.match(SQLiteParser.K_FROM)
                    self.state = 1593
                    la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                    if la_ == 1:
                        self.state = 1584
                        self.table_or_subquery()
                        self.state = 1589
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1585
                            self.match(SQLiteParser.COMMA)
                            self.state = 1586
                            self.table_or_subquery()
                            self.state = 1591
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1592
                        self.join_clause()
                        pass




                self.state = 1599
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_WHERE:
                    self.state = 1597
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 1598
                    self.expr(0)


                self.state = 1615
                _la = self._input.LA(1)
                if _la==SQLiteParser.K_GROUP:
                    self.state = 1601
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 1602
                    self.match(SQLiteParser.K_BY)
                    self.state = 1603
                    self.expr(0)
                    self.state = 1608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1604
                        self.match(SQLiteParser.COMMA)
                        self.state = 1605
                        self.expr(0)
                        self.state = 1610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1613
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.K_HAVING:
                        self.state = 1611
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 1612
                        self.expr(0)





            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1617
                self.match(SQLiteParser.K_VALUES)
                self.state = 1618
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1619
                self.expr(0)
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1620
                    self.match(SQLiteParser.COMMA)
                    self.state = 1621
                    self.expr(0)
                    self.state = 1626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1627
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1628
                    self.match(SQLiteParser.COMMA)
                    self.state = 1629
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1630
                    self.expr(0)
                    self.state = 1635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1631
                        self.match(SQLiteParser.COMMA)
                        self.state = 1632
                        self.expr(0)
                        self.state = 1637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1638
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Compound_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_compound_operator)
        try:
            self.state = 1652
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.match(SQLiteParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.match(SQLiteParser.K_UNION)
                self.state = 1649
                self.match(SQLiteParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1650
                self.match(SQLiteParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1651
                self.match(SQLiteParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Cte_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCte_table_name"):
                listener.enterCte_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCte_table_name"):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.table_name()
            self.state = 1666
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1655
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1656
                self.column_name()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1657
                    self.match(SQLiteParser.COMMA)
                    self.state = 1658
                    self.column_name()
                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1664
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Signed_numberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 1668
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1671
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Literal_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.K_CURRENT_DATE) | (1 << SQLiteParser.K_CURRENT_TIME) | (1 << SQLiteParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SQLiteParser.K_NULL - 104)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 104)) | (1 << (SQLiteParser.STRING_LITERAL - 104)) | (1 << (SQLiteParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Unary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Error_messageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_argument"):
                listener.enterModule_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_argument"):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_module_argument)
        try:
            self.state = 1681
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1680
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.KeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SQLiteParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SQLiteParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SQLiteParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SQLiteParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SQLiteParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SQLiteParser.K_ABORT - 25)) | (1 << (SQLiteParser.K_ACTION - 25)) | (1 << (SQLiteParser.K_ADD - 25)) | (1 << (SQLiteParser.K_AFTER - 25)) | (1 << (SQLiteParser.K_ALL - 25)) | (1 << (SQLiteParser.K_ALTER - 25)) | (1 << (SQLiteParser.K_ANALYZE - 25)) | (1 << (SQLiteParser.K_AND - 25)) | (1 << (SQLiteParser.K_AS - 25)) | (1 << (SQLiteParser.K_ASC - 25)) | (1 << (SQLiteParser.K_ATTACH - 25)) | (1 << (SQLiteParser.K_AUTOINCREMENT - 25)) | (1 << (SQLiteParser.K_BEFORE - 25)) | (1 << (SQLiteParser.K_BEGIN - 25)) | (1 << (SQLiteParser.K_BETWEEN - 25)) | (1 << (SQLiteParser.K_BY - 25)) | (1 << (SQLiteParser.K_CASCADE - 25)) | (1 << (SQLiteParser.K_CASE - 25)) | (1 << (SQLiteParser.K_CAST - 25)) | (1 << (SQLiteParser.K_CHECK - 25)) | (1 << (SQLiteParser.K_COLLATE - 25)) | (1 << (SQLiteParser.K_COLUMN - 25)) | (1 << (SQLiteParser.K_COMMIT - 25)) | (1 << (SQLiteParser.K_CONFLICT - 25)) | (1 << (SQLiteParser.K_CONSTRAINT - 25)) | (1 << (SQLiteParser.K_CREATE - 25)) | (1 << (SQLiteParser.K_CROSS - 25)) | (1 << (SQLiteParser.K_CURRENT_DATE - 25)) | (1 << (SQLiteParser.K_CURRENT_TIME - 25)) | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SQLiteParser.K_DATABASE - 25)) | (1 << (SQLiteParser.K_DEFAULT - 25)) | (1 << (SQLiteParser.K_DEFERRABLE - 25)) | (1 << (SQLiteParser.K_DEFERRED - 25)) | (1 << (SQLiteParser.K_DELETE - 25)) | (1 << (SQLiteParser.K_DESC - 25)) | (1 << (SQLiteParser.K_DETACH - 25)) | (1 << (SQLiteParser.K_DISTINCT - 25)) | (1 << (SQLiteParser.K_DROP - 25)) | (1 << (SQLiteParser.K_EACH - 25)) | (1 << (SQLiteParser.K_ELSE - 25)) | (1 << (SQLiteParser.K_END - 25)) | (1 << (SQLiteParser.K_ESCAPE - 25)) | (1 << (SQLiteParser.K_EXCEPT - 25)) | (1 << (SQLiteParser.K_EXCLUSIVE - 25)) | (1 << (SQLiteParser.K_EXISTS - 25)) | (1 << (SQLiteParser.K_EXPLAIN - 25)) | (1 << (SQLiteParser.K_FAIL - 25)) | (1 << (SQLiteParser.K_FOR - 25)) | (1 << (SQLiteParser.K_FOREIGN - 25)) | (1 << (SQLiteParser.K_FROM - 25)) | (1 << (SQLiteParser.K_FULL - 25)) | (1 << (SQLiteParser.K_GLOB - 25)) | (1 << (SQLiteParser.K_GROUP - 25)) | (1 << (SQLiteParser.K_HAVING - 25)) | (1 << (SQLiteParser.K_IF - 25)) | (1 << (SQLiteParser.K_IGNORE - 25)) | (1 << (SQLiteParser.K_IMMEDIATE - 25)) | (1 << (SQLiteParser.K_IN - 25)) | (1 << (SQLiteParser.K_INDEX - 25)) | (1 << (SQLiteParser.K_INDEXED - 25)) | (1 << (SQLiteParser.K_INITIALLY - 25)) | (1 << (SQLiteParser.K_INNER - 25)) | (1 << (SQLiteParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SQLiteParser.K_INSTEAD - 89)) | (1 << (SQLiteParser.K_INTERSECT - 89)) | (1 << (SQLiteParser.K_INTO - 89)) | (1 << (SQLiteParser.K_IS - 89)) | (1 << (SQLiteParser.K_ISNULL - 89)) | (1 << (SQLiteParser.K_JOIN - 89)) | (1 << (SQLiteParser.K_KEY - 89)) | (1 << (SQLiteParser.K_LEFT - 89)) | (1 << (SQLiteParser.K_LIKE - 89)) | (1 << (SQLiteParser.K_LIMIT - 89)) | (1 << (SQLiteParser.K_MATCH - 89)) | (1 << (SQLiteParser.K_NATURAL - 89)) | (1 << (SQLiteParser.K_NO - 89)) | (1 << (SQLiteParser.K_NOT - 89)) | (1 << (SQLiteParser.K_NOTNULL - 89)) | (1 << (SQLiteParser.K_NULL - 89)) | (1 << (SQLiteParser.K_OF - 89)) | (1 << (SQLiteParser.K_OFFSET - 89)) | (1 << (SQLiteParser.K_ON - 89)) | (1 << (SQLiteParser.K_OR - 89)) | (1 << (SQLiteParser.K_ORDER - 89)) | (1 << (SQLiteParser.K_OUTER - 89)) | (1 << (SQLiteParser.K_PLAN - 89)) | (1 << (SQLiteParser.K_PRAGMA - 89)) | (1 << (SQLiteParser.K_PRIMARY - 89)) | (1 << (SQLiteParser.K_QUERY - 89)) | (1 << (SQLiteParser.K_RAISE - 89)) | (1 << (SQLiteParser.K_RECURSIVE - 89)) | (1 << (SQLiteParser.K_REFERENCES - 89)) | (1 << (SQLiteParser.K_REGEXP - 89)) | (1 << (SQLiteParser.K_REINDEX - 89)) | (1 << (SQLiteParser.K_RELEASE - 89)) | (1 << (SQLiteParser.K_RENAME - 89)) | (1 << (SQLiteParser.K_REPLACE - 89)) | (1 << (SQLiteParser.K_RESTRICT - 89)) | (1 << (SQLiteParser.K_RIGHT - 89)) | (1 << (SQLiteParser.K_ROLLBACK - 89)) | (1 << (SQLiteParser.K_ROW - 89)) | (1 << (SQLiteParser.K_SAVEPOINT - 89)) | (1 << (SQLiteParser.K_SELECT - 89)) | (1 << (SQLiteParser.K_SET - 89)) | (1 << (SQLiteParser.K_TABLE - 89)) | (1 << (SQLiteParser.K_TEMP - 89)) | (1 << (SQLiteParser.K_TEMPORARY - 89)) | (1 << (SQLiteParser.K_THEN - 89)) | (1 << (SQLiteParser.K_TO - 89)) | (1 << (SQLiteParser.K_TRANSACTION - 89)) | (1 << (SQLiteParser.K_TRIGGER - 89)) | (1 << (SQLiteParser.K_UNION - 89)) | (1 << (SQLiteParser.K_UNIQUE - 89)) | (1 << (SQLiteParser.K_UPDATE - 89)) | (1 << (SQLiteParser.K_USING - 89)) | (1 << (SQLiteParser.K_VACUUM - 89)) | (1 << (SQLiteParser.K_VALUES - 89)) | (1 << (SQLiteParser.K_VIEW - 89)) | (1 << (SQLiteParser.K_VIRTUAL - 89)) | (1 << (SQLiteParser.K_WHEN - 89)) | (1 << (SQLiteParser.K_WHERE - 89)) | (1 << (SQLiteParser.K_WITH - 89)) | (1 << (SQLiteParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Database_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_database_name

        def enterRule(self, listener):
            if hasattr(listener, "enterDatabase_name"):
                listener.enterDatabase_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDatabase_name"):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = SQLiteParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_or_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.New_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterNew_table_name"):
                listener.enterNew_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNew_table_name"):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Column_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Collation_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Foreign_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_table"):
                listener.enterForeign_table(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_table"):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Trigger_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTrigger_name"):
                listener.enterTrigger_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTrigger_name"):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.View_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener):
            if hasattr(listener, "enterView_name"):
                listener.enterView_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitView_name"):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Module_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_name"):
                listener.enterModule_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_name"):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Pragma_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Savepoint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Table_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Transaction_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SQLiteParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_any_name)
        try:
            self.state = 1728
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1721
                self.match(SQLiteParser.IDENTIFIER)

            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER, SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND, SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT, SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY, SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK, SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT, SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE, SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME, SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT, SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE, SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP, SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS, SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN, SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP, SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE, SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY, SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD, SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL, SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE, SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO, SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF, SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER, SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY, SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE, SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX, SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE, SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE, SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO, SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION, SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN, SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1722
                self.keyword()

            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1723
                self.match(SQLiteParser.STRING_LITERAL)

            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1724
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1725
                self.any_name()
                self.state = 1726
                self.match(SQLiteParser.CLOSE_PAR)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




